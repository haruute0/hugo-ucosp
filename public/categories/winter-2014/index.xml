<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Winter 2014 on My New Hugo Site</title>
    <link>http://haruute0.github.io/categories/winter-2014/</link>
    <description>Recent content in Winter 2014 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Apr 2014 14:13:12 +0000</lastBuildDate>
    <atom:link href="http://haruute0.github.io/categories/winter-2014/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>UCOSP: How I learned to stop worrying and love open source development</title>
      <link>http://haruute0.github.io/winter-2014/2014/04/ucosp-how-i-learned-to-stop-worrying-and-love-open-source-development/</link>
      <pubDate>Wed, 09 Apr 2014 14:13:12 +0000</pubDate>
      
      <guid>http://haruute0.github.io/winter-2014/2014/04/ucosp-how-i-learned-to-stop-worrying-and-love-open-source-development/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;alignnone&#34; alt=&#34;&#34; src=&#34;http://olessika.files.wordpress.com/2014/03/move_fast_and_break_things_by_kefirbertulli-d4r45k7.jpg?w=842&#34; width=&#34;505&#34; height=&#34;316&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Olessia Karpova from the University of Toronto summarizes her UCOSP experience:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First steps&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The first step after being accepted into the program is picking the project. This year there were over 20 projects, how do you choose the right one? This is something you’ll be working on for a considerable amount of time – think about what your priorities are: is it to dive deeper into a topic you are already comfortable with? Dive into something completely new?It will be challenging either way – I thought that being familiar with the technologies used in the project will make the experience less overwhelming. This turned out to be completely wrong – jumping in on a project with a big existing code base is always overwhelming at first. The lesson to learn as quickly as possible is to ask questions. Personally, I’ve always preferred working things out on my own and not have to bug anyone. It takes some time to get used to the idea that the mentors are happy to answer questions, and that really, instead of spending hours trying to figure something out it is much better, for the project, if you spent ten minutes talking to someone who knows the code inside out and will probably be able to figure out what the block is from as vague a description as “the tests in file x all suddenly fail, and I didn’t do anything” (true story).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working habits and expectations&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Throughout my university experience I’ve been quite organized so I had no concerns about being able to put in the required number of hours each week, and keeping up with the workload without having to set aside specific time to work on the project. This turned out to be only partially true – I quickly realized that while I had no problem putting in the hours throughout the week, it was best to set aside a day when I could focus solely on the project. As students, we do not usually feel this with regular course assignments since they are usually rather small units of work, but with bigger and more complex projects it takes some time to get into the ‘zone’, so to say. It’s simply less productive to break up the 8 hours into 2 hour chunks if every time you have to take 20 minutes just to get back into the mindset and start working.&lt;/p&gt;

&lt;p&gt;It is easy to get stressed in the first few weeks, feel unproductive, and completely overwhelmed with code base.&lt;/p&gt;

&lt;p&gt;It is important, however, to manage your own expectations. It is completely OK to feel that way, no one expects you to start contributing code to the main branch in the first week. It is completely OK if fixing your first bug takes an entire day. Or if you spend the day trying and failing to solve a problem. The most important thing is that you’ll probably learn more in that one day then in a few weeks of a software engineering class. This really is the most important lesson to take away – and it took me a while to fully appreciate it – we learn best by failing. After struggling through something, we not only learn which solutions work and which ones don’t, but also how to change the approach to the problem, how to step away and look at it at a different angle, how to apply prior knowledge and when to search for new approaches. While failing _is_ learning, it is also important to know when to step away from the issue and ask for help. That’s a balance that can be hard to strike, but if you run out of ideas of what is going wrong it is definitely time to start asking questions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preparing the tools&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There are a few things you can do to make the term more productive and get a head start. Most importantly, if you are not familiar with the version control system the project uses it is a good idea to get comfortable with it. You will definitely need to know how to update the repository, create branches, and commit your work.&lt;/p&gt;

&lt;p&gt;Most of the version control systems have GUI’s these days, but it’s best to be familiar with the main operations and be able to do these from the command line.&lt;/p&gt;

&lt;p&gt;Another suggestion is to find a good IDE for the language you’ll be primarily working with, and get familiar with its features. For python development I highly recommend PyCharm by JetBrain. (This advertising is based on a year of working with PyCharm and is not sponsored by anyone. By the way, IntelliJ for Java is also great.). As for features, take a look at how to do refactoring, finding declarations and implementations, code formatting and completion, setting up virtual environments, and many others. I find that it’s easy to get into sort of routine, where you’re comfortable with the tools and the workflow you’re used to, but there’s always, I think, a room for improving the workflow by using better tools, and using the tools you have better.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Final thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It’s been a great semester and I learned a lot from the UCOSP experience.&lt;/p&gt;

&lt;p&gt;I had a chance to be involved in cool project, do real, useful work, and meet and work with a number of great people.&lt;/p&gt;

&lt;p&gt;It was by no means easy, but it was a great learning experience I would highly recommend getting involved in UCOSP to anyone in the Computer Science program. I am looking forward to sharing my work on the demo day in a few weeks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extending MediaWiki using extensions and hooks</title>
      <link>http://haruute0.github.io/winter-2014/2014/03/extending-mediawiki-using-extensions-and-hooks/</link>
      <pubDate>Thu, 13 Mar 2014 13:51:22 +0000</pubDate>
      
      <guid>http://haruute0.github.io/winter-2014/2014/03/extending-mediawiki-using-extensions-and-hooks/</guid>
      <description>&lt;p&gt;Wen-Chien Chen from Waterloo fills us in on his work with MediaWiki extensions:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mediawiki.org/&#34;&gt;MediaWiki&lt;/a&gt; is a versatile wiki software package written in PHP that powers websites where users write collaboratively. It is used in a variety of applications, from Wikipedia to the online documentation of Arch Linux. The extension architecture of MediaWiki allows it to adapt to the needs of different applications: while the core portion of the software is already powerful, it can be augmented with modular extensions. In particular, MediaWiki allows extensions to define hooks, and to register handlers for hooks defined in MediaWiki and other extensions. We used this feature to add the ability to send thank you notifications to other users for their comments on discussion boards powered by the &lt;a href=&#34;https://www.mediawiki.org/wiki/Extension:Flow&#34;&gt;Flow extension&lt;/a&gt;, leveraging existing code in the &lt;a href=&#34;https://www.mediawiki.org/wiki/Extension:Thanks&#34;&gt;Thanks extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On a Flow discussion board, each comment has several interaction links for editing, replying and other functionality. In the Flow extension, the code that generates the interaction links is similar to the following:&lt;/p&gt;

&lt;pre style=&#34;tab-size: 4; white-space: pre-wrap;&#34;&gt;&lt;code&gt;public function postInteractionLinks( $replyButtonClass, $editButtonClass ) {
    $items = array();

    // Generate the HTML code for reply and edit buttons and append them to $items
    $replyButton = $this-&amp;gt;replyButton( $replyButtonClass );
    if ( $replyButton ) {
        $items[] = $replyButton;
    }
    $editButton = $this-&amp;gt;editPostButton( $editButtonClass );
    if ( $editButton ) {
        $items[] = $editButton;
    }

    // Construct and return formatted HTML containing the interaction links
    return implode(
        Html::element(
            &#39;span&#39;,
            array( &#39;class&#39; =&amp;gt; &#39;flow-post-interaction-separator&#39; ),
            wfMessage( &#39;flow-post-interaction-separator&#39; )-&amp;gt;text()
        ),
        $items
    );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To allow other extensions to add more links, we added a call to &lt;code&gt;wfRunHooks()&lt;/code&gt; immediately before the return statement:&lt;/p&gt;

&lt;pre style=&#34;white-space: pre-wrap;&#34;&gt;&lt;code&gt;// $this-&amp;gt;post refers to the comment and $this-&amp;gt;user refers to the viewing user
wfRunHooks( &#39;FlowAddPostInteractionLinks&#39;, array( $this-&amp;gt;post, $this-&amp;gt;user, &amp;$items ) );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;wfRunHooks()&lt;/code&gt; is a global function in MediaWiki that calls each hook function registered to handle an event—in this case, one we just defined as &lt;code&gt;FlowAddPostInteractionLinks&lt;/code&gt;. Multiple handlers, which would be called in sequence, can respond to the same event. The contents of the array are passed as arguments to the hook functions. Note that a reference to &lt;code&gt;$items&lt;/code&gt; is passed in, in order to allow handlers to modify the items array.&lt;/p&gt;

&lt;p&gt;In the Thanks extension, we added a static method to the &lt;code&gt;ThanksHooks&lt;/code&gt; class. It handles the event by appending a link to &lt;code&gt;$items&lt;/code&gt;, returning &lt;code&gt;true&lt;/code&gt; on success:&lt;/p&gt;

&lt;pre style=&#34;tab-size: 4; white-space: pre-wrap;&#34;&gt;&lt;code&gt;public static function onFlowAddPostInteractionLinks( $post, $user, &amp;$links ) {

    // Perform permission checks and other processing

    // Generate the HTML code for a thank buttons and append it to $items
    $links[] = Html::element(
        &#39;a&#39;,
        array(
            &#39;href&#39; =&amp;gt; $this-&amp;gt;getThanksApiUrl( $post-&amp;gt;getPostId ),
            &#39;data-post-id&#39; =&amp;gt; $post-&amp;gt;getPostId()
        ),
        wfMessage( &#39;thanks-button-text&#39; )-&amp;gt;parse()
    );
    return true;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To register the method as a handler so that it would be called during the call to &lt;code&gt;wfRunHooks()&lt;/code&gt;, we appended its name to the relevant entry in &lt;code&gt;$wgHooks&lt;/code&gt;, which is an associative array that stores the handlers registered for each event. (In general, variables in MediaWiki with the &lt;code&gt;wg&lt;/code&gt; prefix have global scope.) This was done by adding following line to &lt;code&gt;Thanks.php&lt;/code&gt;, which contains setup instructions for the Thanks extension:&lt;/p&gt;

&lt;pre style=&#34;white-space: pre-wrap;&#34;&gt;&lt;code&gt;$wgHooks[&#39;FlowAddPostInteractionLinks&#39;][] = &#39;ThanksHooks::onFlowAddPostInteractionLinks&#39;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;#8217;s pretty much all that needs to be done to integrate the two extensions! After doing the above, a link for thanking the author will be appended to the interaction links for each comment. The hooks system makes it easy to add new functionality to MediaWiki and its extensions, and enables interaction between different parts of the software.&lt;/p&gt;

&lt;p&gt;Aside from defining hooks ourselves by adding calls to &lt;code&gt;wfRunHooks()&lt;/code&gt;, the core code of MediaWiki defines a number of events that extensions can respond to. A partial list is available at the &lt;a href=&#34;https://www.mediawiki.org/wiki/Manual:Hooks#Available_hooks&#34;&gt;Hooks manual page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my time working with MediaWiki so far, I have found writing and modifying extensions to be a great way to learn about hacking MediaWiki. Aside from the hooks system described here, there are numerous other features in MediaWiki that simplify the work needed to create an extension. The &lt;a href=&#34;https://www.mediawiki.org/wiki/Manual:Developing_extensions&#34;&gt;Developing extensions manual page&lt;/a&gt; is a good starting point for learning about extension development, and &lt;a href=&#34;https://www.mediawiki.org/&#34;&gt;MediaWiki.org&lt;/a&gt;, along with the &lt;a href=&#34;https://doc.wikimedia.org/mediawiki-core/master/php/html/&#34;&gt;class reference&lt;/a&gt;, provides extensive documentation about the internals of the software. Happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Winter 2014 Code Sprint</title>
      <link>http://haruute0.github.io/winter-2014/2014/03/winter-2014-code-sprint/</link>
      <pubDate>Mon, 03 Mar 2014 17:23:05 +0000</pubDate>
      
      <guid>http://haruute0.github.io/winter-2014/2014/03/winter-2014-code-sprint/</guid>
      <description>&lt;p&gt;Tim Windsor and Deric Cheng check in with their experiences at the &lt;a href=&#34;http://devblog.blackberry.com/2014/02/event-recap-facebook-open-academy-sprint-2/&#34;&gt;code sprint&lt;/a&gt; at Facebook held in mid February.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing for Blackberry Cordova on Linux</title>
      <link>http://haruute0.github.io/winter-2014/2014/02/developing-for-blackberry-cordova-on-linux/</link>
      <pubDate>Tue, 25 Feb 2014 15:17:24 +0000</pubDate>
      
      <guid>http://haruute0.github.io/winter-2014/2014/02/developing-for-blackberry-cordova-on-linux/</guid>
      <description>

&lt;p&gt;James Wood from Waterloo is working on Blackberry Cordova plugins on Linux and provides this reference for future developers who are trying to do the same.&lt;/p&gt;

&lt;h3 id=&#34;history:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;History&lt;/h3&gt;

&lt;p&gt;As of this writing, Linux is not supported by Blackberry for development, which means if you are reading this, that you have chosen to walk the difficult path. The good news is that you won&amp;#8217;t be alone, and hopefully this guide will help get you started. The bad news is that a similar guide was written about four months before this one that was already so far out of date by the time I began working the BB10 Cordova, that it was of no use whatsoever. As a consequence, I fear that portions of this guide may also be obsolete by the time you need it. If so, let&amp;#8217;s hope that this is because Blackberry has decided to fully support Linux, and a guide like this is no longer needed at all.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s get down to business then.&lt;/p&gt;

&lt;h3 id=&#34;preflight-checklist:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Preflight Checklist&lt;/h3&gt;

&lt;p&gt;Before we begin, this guide makes some assumptions about you, the reader:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have some idea of what an extension is and does, and moreover, why you want to write one.&lt;/li&gt;
&lt;li&gt;You have a github account, and you have already forked the WebWorks-Community-APIs repository.&lt;/li&gt;
&lt;li&gt;I am using Ubuntu 12.10, and you are (obviously) using some version of linux. Where things might differ between us, you can handle yourself.&lt;/li&gt;
&lt;li&gt;You are working on a machine for which you have administrative rights.&lt;/li&gt;
&lt;li&gt;You have a BB10 device with which to work. I am using the Dev Alpha C model myself.&lt;/li&gt;
&lt;li&gt;Your device has the latest OS installed.

&lt;ul&gt;
&lt;li&gt;You can get that here: &lt;a href=&#34;https://developer.blackberry.com/devzone/blackberry10devalpha/devalpha_update.html&#34;&gt;https://developer.blackberry.com/devzone/blackberry10devalpha/devalpha_update.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Note however that updating the device OS via the autoloader is only possible through a windows machine (at this time)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You have a Blackberry ID set up already. If you don&amp;#8217;t, you can do so from your device directly, although you&amp;#8217;ll need an internet connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-guide:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;The Guide&lt;/h2&gt;

&lt;h3 id=&#34;step-1-momentics-installation:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 1: Momentics Installation&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download and install Momentics SDK from&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.blackberry.com/native/downloads/&#34;&gt;https://developer.blackberry.com/native/downloads/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to the directory where you saved the binary, chmod it to be executable, and run it (as yourself, not as root)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I recommend you use all the default settings, unless you have a good reason not to.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow Momentics to run after the installation is complete. If you don&amp;#8217;t, you can always start it from the terminal: ~/bbndk/qde (assuming defaults)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On startup, it will attempt to find your device. Let if fail, and see Step 2. If you don&amp;#8217;t have one, you can ignore this and always deal with it later.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-2-device-setup:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 2: Device Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Turn on your device, and go to Settings-&amp;gt;Storage and Access&lt;/li&gt;
&lt;li&gt;Set the USB connection to &amp;#8220;Connect to Mac&amp;#8221; (see image below)&lt;/li&gt;
&lt;li&gt;Go back to Settings-&amp;gt;Security and Privacy&lt;/li&gt;
&lt;li&gt;Scroll all the way to the bottom and select Development Mode&lt;/li&gt;
&lt;li&gt;Turn on development mode (see image below)

&lt;ul&gt;
&lt;li&gt;This requires the device password, which I suggest setting to something very simple while you work&lt;/li&gt;
&lt;li&gt;Note that development mode automatically turns off when the device restarts, or after 2-3 days&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Connect the device via USB cable, and on Momentics click &amp;#8220;Try Again&amp;#8221;&lt;/li&gt;
&lt;li&gt;Enter the device password when prompted&lt;/li&gt;
&lt;li&gt;Install the recommended API level, and go get a coffee (this takes a while)&lt;/li&gt;
&lt;li&gt;If prompted about installing debug stuff, do so, but then &lt;strong&gt;do not&lt;/strong&gt; click restart until it completes (see image below)&lt;/li&gt;
&lt;li&gt;Click restart, but don&amp;#8217;t expect it to actually open again on it&amp;#8217;s own.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://ucosp.ca/wp-content/uploads/2014/02/jpw_USB.png&#34; width=&#34;600&#34; height=&#34;800&#34; /&gt;&lt;img alt=&#34;&#34; src=&#34;http://ucosp.ca/wp-content/uploads/2014/02/jpw_DevMode.png&#34; width=&#34;600&#34; height=&#34;800&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://ucosp.ca/wp-content/uploads/2014/02/jpw_Wait_Here.png&#34; width=&#34;800&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-3-more-momentics-setup:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 3: More Momentics Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open Momentics: ~/bbndk/qde&lt;/li&gt;
&lt;li&gt;Go to the menu: Window-&amp;gt;Preferences&lt;/li&gt;
&lt;li&gt;Choose Blackberry-&amp;gt;Signing from the panel on the left&lt;/li&gt;
&lt;li&gt;Enter your Blackberry ID password and click &amp;#8220;Get Token&amp;#8221; which will make you actually sign in with your Blackberry ID&lt;/li&gt;
&lt;li&gt;Once successful, click &amp;#8220;Create Certificate&amp;#8221;. You should no longer see a warning at the top of the page.&lt;/li&gt;
&lt;li&gt;Exit Momentics.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-4-install-node-js:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 4: Install Node.js&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;If you aleady have this, then go to step 5, otherwise enter the following commands from the terminal:&lt;/li&gt;
&lt;li&gt;sudo apt-get install python-software-properties python g++ make&lt;/li&gt;
&lt;li&gt;sudo add-apt-repository ppa:chris-lea/node.js&lt;/li&gt;
&lt;li&gt;sudo apt-get update&lt;/li&gt;
&lt;li&gt;sudo apt-get install nodejs&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-5-install-cordova:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 5: Install Cordova&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;sudo npm install -g cordova&lt;/li&gt;
&lt;li&gt;You may need to add /usr/local/share/npm to your $PATH, but I had no issues without doing this.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-6-clone-the-webworks-community-apis-repo-locally:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 6: Clone the WebWorks-Community-APIs repo locally&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Make a directory where you want to put it. I made ~/UCOSP since I was doing this for the UCOSP.&lt;/li&gt;
&lt;li&gt;cd ~/UCSOP&lt;/li&gt;
&lt;li&gt;git clone git@github.com:your-git-username/WebWorks-Community-APIs.git

&lt;ul&gt;
&lt;li&gt;where your-git-username is your username for github&lt;/li&gt;
&lt;li&gt;Permission Denied? You need to add an RSA key to github. Follow this helpful guide: &lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys&#34;&gt;https://help.github.com/articles/generating-ssh-keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-7-environment-variables:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 7: Environment Variables&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;cd ~/bbndk&lt;/li&gt;
&lt;li&gt;ls&lt;/li&gt;
&lt;li&gt;Notice the file &amp;#8220;bbndk*.sh&amp;#8221; (see image below). I found that actually running the script did not do as intended, but simply sourcing it was sufficient:&lt;/li&gt;
&lt;li&gt;source bbndk*.sh&lt;/li&gt;
&lt;li&gt;You &lt;strong&gt;must do this every time&lt;/strong&gt; you open a terminal to work, so you might as well add line 4 to you .bash_profile or similar file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://ucosp.ca/wp-content/uploads/2014/02/jpw_bbndk_dir.png&#34; width=&#34;800&#34; height=&#34;600&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-8-running-the-template-sample-app:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;Step 8: Running the Template Sample App&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;cd ~/UCOSP/W*/BB10-*/T*&lt;/li&gt;
&lt;li&gt;cordova create sample2&lt;/li&gt;
&lt;li&gt;copy the www folder in /sample to /sample2, and overwrite anything there&lt;/li&gt;
&lt;li&gt;cd sample2&lt;/li&gt;
&lt;li&gt;cordova platform add blackberry10

&lt;ul&gt;
&lt;li&gt;This is most likely fail. If not, go buy a lotto ticket.&lt;/li&gt;
&lt;li&gt;The easiest solution is to change ownership of ~/tmp to yourself instead of root, then try again.&lt;/li&gt;
&lt;li&gt;If you find an alternative solution, please document it, and let us know.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;cordova plugin add ../plugin&lt;/li&gt;
&lt;li&gt;cordova run sample2&lt;/li&gt;
&lt;li&gt;Your device will eventually start and app called &amp;#8220;Cordova3&amp;#8221;&lt;/li&gt;
&lt;li&gt;Click &amp;#8220;OK&amp;#8221; on the Web Inspector popup&lt;/li&gt;
&lt;li&gt;Scroll down to see the test output from the app&lt;/li&gt;
&lt;li&gt;Congratulations, the hard part is over!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://ucosp.ca/wp-content/uploads/2014/02/jpw_SampleApp.png&#34; width=&#34;600&#34; height=&#34;800&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-8217-s-next:e5b702bba2836c97c1cbcf33d4c33a67&#34;&gt;What&amp;#8217;s Next?&lt;/h3&gt;

&lt;p&gt;The sample app uses the Template plugin to make several different types of Javascript calls to the native-level C++ underneath. To make your own extension, copy the Template directory, and use it as a basis for your work. Read Template/README.md for more information. Good Luck, and Happy Coding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Initial UCOSP Report</title>
      <link>http://haruute0.github.io/winter-2014/2014/02/initial-ucosp-report/</link>
      <pubDate>Fri, 21 Feb 2014 15:10:41 +0000</pubDate>
      
      <guid>http://haruute0.github.io/winter-2014/2014/02/initial-ucosp-report/</guid>
      <description>&lt;p class=&#34;c5&#34;&gt;
  &lt;span&gt;Hi! My name is Brandon Noad, and I am a Computer Science student at the University of Waterloo. This term I was selected to participate in the &lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://ucosp.ca/&#34;&gt;UCOSP program&lt;/a&gt;&lt;/span&gt;&lt;span&gt; where I get to work on an open source software project with other students from around the globe—for credit!&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&#34;c6 c5&#34;&gt;
  The project I was assigned to is called GeoTrellis. GeoTrellis is a &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;&lt;/span&gt; library and framework for creating useful, high performing web services that load and manipulate &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://geotrellis.github.io/glossary/#raster_data&#34;&gt;raster data&lt;/a&gt;&lt;/span&gt; (visit the GeoTrellis &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://geotrellis.github.io/index.html&#34;&gt;documentation&lt;/a&gt;&lt;/span&gt; and &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/geotrellis/geotrellis&#34;&gt;GitHub&lt;/a&gt;&lt;/span&gt; pages for more information). You can check out a cool example of GeoTrellis in action &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://demo.geotrellis.com/chatta/&#34;&gt;here&lt;/a&gt;&lt;/span&gt;.
&lt;/p&gt;

&lt;p class=&#34;c6 c5&#34;&gt;
  In the past few months, I have completed Coursera’s “&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://www.coursera.org/course/progfun&#34;&gt;Functional Programming Principles in Scala&lt;/a&gt;&lt;/span&gt;” course, written a web application in Scala using the &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.playframework.com/&#34;&gt;Play&lt;/a&gt;&lt;/span&gt; framework, and attended several local &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.meetup.com/WaterlooScala/&#34;&gt;Scala Meetups&lt;/a&gt;&lt;/span&gt; here in Waterloo. I really enjoy programming in Scala, and GeoTrellis was at the top of my list of project choices because I wanted to continue to improve my Scala programming skills. Although I had very little experience working with geospatial data, I was able to get up to speed quickly with help from my project mentor &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/lossyrob&#34;&gt;Rob&lt;/a&gt;&lt;/span&gt;.
&lt;/p&gt;

&lt;p class=&#34;c6 c5&#34;&gt;
  To prepare for the UCOSP Winter 2014 code sprint, I completed the following list of tasks:
&lt;/p&gt;

&lt;ul class=&#34;c7 lst-kix_ylhsgqvhxe5q-0 start&#34;&gt;
  &lt;li class=&#34;c2&#34;&gt;
    &lt;span&gt;Forked the GeoTrellis repository (&lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/BrandonNoad/geotrellis&#34;&gt;my fork&lt;/a&gt;&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;c2&#34;&gt;
    &lt;span&gt;Built the project using &lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt;&lt;/span&gt;&lt;span&gt; and ran the unit tests.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;c2&#34;&gt;
    &lt;span&gt;Submitted a &lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/geotrellis/geotrellis/pull/700&#34;&gt;pull request&lt;/a&gt;&lt;/span&gt;&lt;span&gt; to fix a typo in the README.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;c2&#34;&gt;
    &lt;span&gt;Created a &lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/BrandonNoad/geotrellis/blob/GeoTrellis-Assignment/src/test/scala/geotrellis/GeoTrellisAssignment.scala&#34;&gt;new test file&lt;/a&gt;&lt;/span&gt;&lt;span&gt; containing a FunSpec test with ShouldMatchers that runs a single unit test. This test creates an Array of 100 random integers, sorts the array, and checks to make sure that for every i, j in {0 &amp;#8230; 99}, if i &lt; j, then array[i] &lt; array[j], where array[x] represents the xth element in the sorted array.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;c2&#34;&gt;
    &lt;span&gt;Completed the GeoTrellis &lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://geotrellis.github.io/tutorials/webservice.html&#34;&gt;web service tutorial&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;c2&#34;&gt;
    &lt;span&gt;Worked on one of the project’s issues (&lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/geotrellis/geotrellis/issues/678&#34;&gt;#678&lt;/a&gt;&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;c2&#34;&gt;
    &lt;span&gt;Submitted a &lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/geotrellis/geotrellis/pull/729&#34;&gt;pull request&lt;/a&gt;&lt;/span&gt;&lt;span&gt; to fix issue #678.&lt;/span&gt;
  &lt;/li&gt;
  &lt;li class=&#34;c2 c8&#34;&gt;
    &lt;span&gt;Read chapters 1-15 of “&lt;/span&gt;&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.artima.com/pins1ed/&#34;&gt;Programming in Scala&lt;/a&gt;&lt;/span&gt;&lt;span&gt;”.&lt;/span&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&#34;c3 c6&#34;&gt;
  This term’s code sprint took place at &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://www.facebook.com/pages/Facebook-HQ/166793820034304&#34;&gt;Facebook HQ&lt;/a&gt;&lt;/span&gt; in Menlo Park, CA. It was my first time in California, and although California is supposedly in the midst of a &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.news10.net/story/news/local/2014/02/10/obama-to-visit-drought-stricken-california/5377073/&#34;&gt;drought&lt;/a&gt;&lt;/span&gt;, it rained for most of the weekend. That said, I was just happy to escape the &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://globalnews.ca/news/1100134/polar-vortex-refuses-to-leave/&#34;&gt;polar vortex&lt;/a&gt;&lt;/span&gt;, so I wasn’t going to let a bit of rain ruin my trip. At the sprint, I had the opportunity to meet my project mentor, Rob, and the other students working on the project—Mitch (&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.ubc.ca/&#34;&gt;UBC&lt;/a&gt;&lt;/span&gt;), Jonathan (&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://web.mit.edu/&#34;&gt;MIT&lt;/a&gt;&lt;/span&gt;), and Armstrong (&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.ubishops.ca/index.html&#34;&gt;BU&lt;/a&gt;&lt;/span&gt;). Overall, I had an amazing time. Besides coding alongside my teammates, I listened to a couple of engaging talks by &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://scottchacon.com/about.html&#34;&gt;Scott Chacon&lt;/a&gt;&lt;/span&gt; and &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://cs210.stanford.edu/about.html&#34;&gt;Jay Borenstein&lt;/a&gt;&lt;/span&gt; about GitHub and startups respectively, visited Stanford’s beautiful &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.stanford.edu/dept/visitorinfo/tours/virtual/&#34;&gt;campus&lt;/a&gt;&lt;/span&gt;, ate a lot of beef jerky (&lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://goldenvalleynatural.com/beef/natural-beef-jerky-black-pepper.html&#34;&gt;mmmmm&lt;/a&gt;&lt;/span&gt;), bowled my first &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.bowlluckystrike.com/three-strikes-turkey-origin&#34;&gt;turkey&lt;/a&gt;&lt;/span&gt;, and had a &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.samovarlife.com/&#34;&gt;cup of tea&lt;/a&gt;&lt;/span&gt; in downtown San Francisco.
&lt;/p&gt;

&lt;p class=&#34;c3 c6&#34;&gt;
  One of the challenges for the sprint was to identify an action plan for the rest of the term. My task is to implement a Scala wrapper for the &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.vividsolutions.com/jts/jtshome.htm&#34;&gt;JTS Topology Suite&lt;/a&gt;&lt;/span&gt; that facilitates vector to raster operations. By using Scala language features such as &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.scala-lang.org/old/node/123&#34;&gt;sealed classes&lt;/a&gt;&lt;/span&gt;, we can leverage the power of Scala’s type system to make working with &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://geotrellis.github.io/glossary/&#34;&gt;vector data&lt;/a&gt;&lt;/span&gt; much more enjoyable for developers. Rob thinks that if we design and implement this wrapper well, it may become the “go-to” solution for working with vector data in Scala. Once the wrapper is complete, the next step is to create a &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://geojson.org/geojson-spec.html#feature-objects&#34;&gt;Feature&lt;/a&gt;&lt;/span&gt; library on top of it to replace the &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://geotrellis.github.io/overviews/vector.html&#34;&gt;existing suite of vector operations&lt;/a&gt;&lt;/span&gt; in the main GeoTrellis project. At the sprint, I began working on the wrapper and submitted a &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://github.com/geotrellis/geotrellis/pull/734&#34;&gt;pull request&lt;/a&gt;&lt;/span&gt; after implementing intersection, union, and difference methods for the various geometry types. It’s exciting to be working on such a meaningful project.
&lt;/p&gt;

&lt;p class=&#34;c3 c6&#34;&gt;
  The GeoTrellis team uses a fairly standard Git/GitHub workflow. We create topic branches off of master for the issues/features we are working on, and we commit to the topic branches locally as well as regularly push any work done to the same named branch in our forked GitHub repo. After hearing Scott Chacon speak at the sprint, Rob decided it would be a good idea to open pull requests as early as possible (e.g. after your first commit). These pull requests then act as a form of code review, allowing us to communicate and receive feedback about our work. Once our work has been reviewed and &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://shipitsquirrel.github.io/&#34;&gt;approved&lt;/a&gt;&lt;/span&gt;, it can be merged into master.
&lt;/p&gt;

&lt;p class=&#34;c3 c6&#34;&gt;
  To keep in touch with Rob and the rest of the team, we have a weekly &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;http://www.extremeprogramming.org/rules/standupmeeting.html&#34;&gt;standup meeting&lt;/a&gt;&lt;/span&gt; via Google Hangouts. GeoTrellis also has an IRC channel (#geotrellis) on freenode and a &lt;span class=&#34;c0&#34;&gt;&lt;a class=&#34;c1&#34; href=&#34;https://groups.google.com/group/geotrellis-user&#34;&gt;mailing list&lt;/a&gt;&lt;/span&gt;.
&lt;/p&gt;

&lt;p class=&#34;c3 c6&#34;&gt;
  If you have read this far and are still wondering if you should apply for UCOSP next term, the answer should definitely be yes! Meeting and interacting with the other students at the sprint was an amazing experience, and my confidence that I belong alongside other software developers has grown as a result. Having the opportunity to do version control, unit testing, and code reviews on a real-world software project has been an invaluable experience so far, and I am certain that my skills as a developer will continue to improve throughout the rest of the UCOSP program.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>