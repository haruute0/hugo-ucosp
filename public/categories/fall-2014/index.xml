<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fall 2014 on My New Hugo Site</title>
    <link>http://haruute0.github.io/categories/fall-2014/</link>
    <description>Recent content in Fall 2014 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Dec 2014 16:40:20 +0000</lastBuildDate>
    <atom:link href="http://haruute0.github.io/categories/fall-2014/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>UMPLE Experiences</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/umple-experiences/</link>
      <pubDate>Wed, 10 Dec 2014 16:40:20 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/umple-experiences/</guid>
      <description>&lt;p&gt;Karin Ng from the University of Toronto gives us her experience working with UMPLE this term.&lt;/p&gt;

&lt;p&gt;Umple merges UML modeling and programming to facilitate Model-Oriented Programming. The models include class diagrams, state machines, and composite structures. My primary project is to create a generator that takes in current Umple semantics to produce GraphViz (open source graph visualization software) code of an entity-relationship diagram. After I have completed the generation, I hope to look into refactoring all the generators and extracting commonalities into a generation library.&lt;/p&gt;

&lt;p&gt;Since the entity-relationship diagram generation is a larger project that requires the knowledge of how to use GraphViz, I decided to begin with a smaller issue, dealing with modifying the tooltips of current implementations of GraphViz diagrams. Believing it would be a relatively simple task, I was surprised when I took a deeper look into the code and realized that the entire structure of the diagram being generated had to be modified to accommodate the new tooltip requirements. The surprises for the seemingly simple task didn’t end there. After modifying the code, creating test cases, and testing my implementation on a clean version of the build, I was satisfied with its reliability. Though I believed that my testing was rigorous enough, I failed to notice that the code I modified was used to create the Meta-Model (a model of the Umple compiler, using Umple). The Meta-Model creation was not tested within the build and, naively trusting the lack of fails within the build, I thought myself safe. The result was a broken Meta-Model that wasn’t noticed until after the faulty code was committed. Mortified by my error, I tackled the problem as soon as I received the email notifying me of the glaring issue. After much correspondence with my mentor (including tips and encouragement), the problems were ironed out and I learned not only the technical skills I had hoped to gain concerning GraphViz, but the value of truly rigorous testing and mentorship.&lt;/p&gt;

&lt;p&gt;In a less technical sense, I also encountered difficulties with juggling my schedule. I had decided from the beginning that I would allocate time for Umple every week on my calendar. However, having taken 6 courses, I found it easy to let my scheduled Umple time slip, especially when other seemingly more pressing assignments with hard deadlines and midterms presented themselves. I also vastly underestimated the time required to get the code working 100%. Much of the work during my internship involved the creation of new features, and I rarely had to greatly modify old code. As such, the modification of the diagram generation and its problems came as a shock to me. Though implementation itself may not have taken too much time in of itself, the time requirement easily doubled when taking into account all factors (such as the design and creation of tests, the re-working of the implementation after exposing bugs from the tests, ensuring compatibility with any updates during the entire process, and applying changes from feedback from mentors).&lt;/p&gt;

&lt;p&gt;Regardless, the complications were vastly overshadowed by the immense satisfaction and joy of getting something working (no matter how small) that will impact hundreds of people. Having discovered all the possible obstacles that may get in the way of a timely commit, it only took a small reformation of my schedule and a little more mindfulness to adequately fit in some Umple development. The fun-factor of Umple development certainly helped in squeezing in more time (even if in the wee hours of the morning) to tackle the next bug or problem. The lessons have been innumerable, from working with a team scattered across the country to things as simple as not being afraid to ask questions, and I am endlessly grateful for the opportunity to be part of UCOSP.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reflecting on UCOSP</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/reflecting-on-ucosp/</link>
      <pubDate>Sun, 07 Dec 2014 21:18:28 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/reflecting-on-ucosp/</guid>
      <description>&lt;div class=&#34;page&#34; title=&#34;Page 1&#34;&gt;
  &lt;div class=&#34;section&#34;&gt;
    &lt;div class=&#34;layoutArea&#34;&gt;
      &lt;div class=&#34;column&#34;&gt;
        &lt;p class=&#34;p1&#34;&gt;
          Andrew Hong from the University of Toronto gives us his impressions of the program.
        &lt;/p&gt;
        
        &lt;p&gt;
          It has been almost two full months in the Undergraduate Capstone Open Source Projects (UCOSP) program and now that I look back, it has been an amazing experience. If you are reading this, you probably have an idea of what the UCOSP program is about and are looking to find out more. UCOSP is basically where you get to work on a distributed open source project for a semester with a team of students and mentors. The mentors and students are likely from all over the country so do not expect to see them in person regularly. You will do most of your communication online with your team through whichever method is preferred; audio, video, text chat, etc. UCOSP is very different from your typical course, you work however you want, and whenever you want. There are deadlines to be met so it keeps everything and everyone in line. Expect to work about 8-10 hours per week and sometimes more, when it is necessary. You do not get any marks until the end of the course but you will receive feedback along the way so you know how you are doing in relation to your mentor’s expectations. You can always ask them how you are coming along just in case you think you are slacking. If there is one takeaway I want you to get out of reading this, it is: enroll into UCOSP now, you will not regret it!
        &lt;/p&gt;
        
        &lt;p&gt;
          The code sprint this year was held at the Mozilla office in Toronto. It was a phenomenal and busy three days. We had all the students enrolled in UCOSP all in one space and separated into our respective teams. For ReviewBoard, we worked on bugs, started projects for the term and made sure everyone was on track. We, the students, were all set up with our environments so there was little time wasted there. It was an awesome experience to meet your fellow students and mentors so you can easily put a face to those internet nicknames that you are always chatting with 🙂 I believe the code sprint was crucial to UCOSP. It makes people familiar with who they are working with and thus making it a more comfortable working environment for all. Food and drinks were provided so no need to worry about thirst or hunger strikes. After hours was up to the team, we decided to wander around the city in search of good food and a good time. Since I was the only Toronto student in my team, I gave them a mini tour of the downtown core, without trying to be touristy. We went for hidden gems and not-so-typical dining spots and by the end of it all, it sounded like everyone had a great time!
        &lt;/p&gt;
        
        &lt;p&gt;
          I am currently working on a project called ReviewBoard (&lt;span style=&#34;color: rgb(6.670000%, 33.300000%, 80.000000%);&#34;&gt;https://www.reviewboard.org/&lt;/span&gt;). In short, it is a web based collaborative code review tool. I am not going to get into much detail about the project itself since you can find out everything from their homepage. The mentors for this project have been fantastic so far and to be quite honest, I cannot ask for any better. All our mentors have been helpful and always willing to lend a hand whenever possible; I am very fortunate to be working on a project with such great folks. We have our team meetings on IRC and in the chat, there are usually a couple of mentors ready to answer any questions we may have. Some prefer audio/video conferences but I have found that it has worked extremely well for us to just use IRC to do most of our communication. It allows other mentors and students to chime in on an issue or just discuss anything in general; it saves all the pain of trying to schedule a meeting with everyone that is involved in a discussion. I started on ReviewBoard doing simple bug fixes just to get familiar with the code base and working with Django. I have never worked with Django but once you get started on bugs and projects, everything will start to fall into place. Be sure to ask questions when you are stuck! I, for one, like to figure things out
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;page&#34; title=&#34;Page 2&#34;&gt;
  &lt;div class=&#34;section&#34;&gt;
    &lt;div class=&#34;layoutArea&#34;&gt;
      &lt;div class=&#34;column&#34;&gt;
        &lt;p&gt;
          by Googling so I sometimes spend hours figuring out the problem and realizing at the end that it was an easy fix. Sometimes when you are really stuck, dig around for yourself first then ask questions once you have given up searching. I think most people in UCOSP will agree: it is best to work in chunks than to give an hour of your time here and there. It may be tough to find a chunk of time but if you try both and compare the two approaches, you will find that you are much more productive working with chunks of time.
        &lt;/p&gt;
        
        &lt;p&gt;
          For those interested, I will dive a bit deeper into ReviewBoard so you get a better glimpse of what goes on behind the scenes and what I have learned so far in regards to the technical side of things. As mentioned earlier, ReviewBoard is a free collaborative web based code review tool. It is currently being used by many big players in the industry such as Cisco, VMware, Twitter, LinkedIn, Amazon and many more. As you can probably tell, ReviewBoard can work with companies and organizations of any size. For me, ReviewBoard was not too difficult to get a grasp of; the code base is very clean and organized so locating pieces of code is easy once you get the hang of it, they are where you will expect them to be. The ReviewBoard code base also consists of Djblets and RBTools. Djblets (pronounced jiblets) are a set of useful extensions that ReviewBoard uses, this includes a datagrid, logging utilities, site configuration tools and much more. On the other hand, RBTools is a set of client tools that allow the user to perform tasks in the command line without accessing the interface. All three code bases are very well organized and documented, so it makes things easier if you are trying to figure things out on your own.
        &lt;/p&gt;
        
        &lt;p&gt;
          My first easy fix bug was an issue with the user/group autocomplete functionality where it would be too ‘aggressive’. More specifically, the autocomplete functionality was selecting the first item that matched and once the user typed any more text, it would still autocomplete to the first item that it matched. Python was very familiar to me but not Django so I had to spend some time at the beginning to get used to the code I was reading. I found that the Django documentation on their homepage (https://docs.djangoproject.com/en/1.7) were helpful in getting started and understanding how Django works as a whole. If you are more of a visual oriented person then YouTube has plenty of good videos that explain more or less the same thing the documentation covers. Your browser’s developer tools are also a great tool to have under your belt. Without knowing where anything in the code base is located, you can use the developer tools to find out some key information (id, class, etc.) of what you are trying to modify then using that to perform a search on your code base can lead you to the right spots in the code to modify. There will be a lot of “aha!” moments once you see how everything is organized. Once the bug isfixed we check it into our local repository managed by git and post it up for review using RBTools. I realized that I did not know git fully when I had worked with it in a distributed project like ReviewBoard. It starts to bring out the all the things I thought I knew, but really did not, if that makes sense. It truly is a one of a kind learning experience that you cannot obtain from your typical Computer Science course.
        &lt;/p&gt;
        
        &lt;p&gt;
          The first project I started to work on for ReviewBoard was allowing users to download all file attachments associated with a review request. First thing I did was brainstorm what I had to do, plan out each step and where the code should be placed. I like to make empty functions as
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;page&#34; title=&#34;Page 3&#34;&gt;
  &lt;div class=&#34;section&#34;&gt;
    &lt;div class=&#34;layoutArea&#34;&gt;
      &lt;div class=&#34;column&#34;&gt;
        &lt;p&gt;
          placeholders so it will help me visualize how the entire feature will work in code. The way Django works is by having a URL dispatcher that determines which view to be called depending on which URL it matched. A view in Django takes a user request and returns a response, usually the response is filling in a template with the appropriate information. This feature did not need a template since all it needed to do was send back a zip file of all the file attachments. The feature was relatively straightforward to implement except handling files from external sources. ReviewBoard allows the administrator to set up where user uploaded file attachments are stored, it can be locally on the server, on an Amazon S3 instance or an OpenStack Swift instance. I knew a lot of the code would be similar so I tried to make sure I coulddo it as easily as possible without duplicating code. It turns out that I could leverage file-like objects (StringIO package) to read local and external files into an object and then write it out to the resulting zip file. After some extensive testing, and a few peer reviews, it should be ready to ship!
        &lt;/p&gt;
        
        &lt;p&gt;
          Next up for my student project, I will be working on adding functionality for the command line tools (RBTools), to enable the tools to search for the matching review request for a given commit. This is helpful when a developer makes new commits to their repository and needs to update the review request, they no longer have to manually input the review request ID and instead the tool can automatically find it for them. The function already exists for some RBTool functions so I will reuse the existing code to implement it for other functions that are missing this feature.
        &lt;/p&gt;
        
        &lt;p&gt;
          So that is it! This is my UCOSP experience so far and I hope you learn a thing or two from my experiences. I am definitely looking forward to the rest of the term but sad at the same time that it will be over shortly 🙁
        &lt;/p&gt;
        
        &lt;p&gt;
          TL;DR enroll in UCOSP and ask questions!
        &lt;/p&gt;
        
        &lt;p&gt;
          If you have any questions, please feel free to ask!&lt;br /&gt; The UCOSP steering committee are a great bunch, so don’t be shy!
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sharing my UCOSP Experience</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/sharing-my-ucosp-experience/</link>
      <pubDate>Thu, 04 Dec 2014 15:41:19 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/sharing-my-ucosp-experience/</guid>
      <description>&lt;p class=&#34;p1&#34;&gt;
  Yifan Ren from the University of Waterloo provides this overview of his UCOSP experience:
&lt;/p&gt;

&lt;p&gt;I Participated in the BB10 PhoneGap team and was working on porting native plugins for BlackBerry10. I had an enjoyable and rewarding time working on the project, and experienced real-world software engineering practices and open source collaboration.&lt;/p&gt;

&lt;p&gt;One thing I really appreciate about the BB10 PhoneGap project is its tasks. It has a list of independent tasks, and each one requests to build a complete plugin project of a useful feature, for example, zip file extraction and compression, barcode scanner, and system dialog. We had a chance to select one that interested us most, and would deal with the whole project, including configuration, source code, build, documentation and tests.&lt;/p&gt;

&lt;p&gt;The first task I selected was to finish the Distimo plugin. Distimo is a mobile app analytics firm, and that plugin helps application developers to track users activities. The project was partly done, and my job was to finish the configuration and add several features. It took my some time to get familiar with the whole system including the Cordova frameworks, the plugin interface, the JavaScript implementation, the native C++ code, and how everything is connected. Fortunately, everything was well-documented, and Tim, our mentor, was extremely helpful and very experienced at the BB10 plugins. By the end of the code sprint, I had finished the configuration, made the test app run, and got some idea about the remaining works.&lt;/p&gt;

&lt;p&gt;Once I was working on a feature called Applink. It gets app id from the Distimo server and shows that app in the blackberry Appworld. I figured out that its implementation needs http requests and http header settings, and I had just learned these early that week in a university course. At that moment, I felt strongly that this project was a great opportunity to apply my knowledge and skills learned in class to the real-life.&lt;/p&gt;

&lt;p&gt;My second task was to build the system dialog plugin, which allows users to prompt global dialogs with buttons from their applications. Thanks to the handy templates and detailed documents, the starting steps were quite easy, while the rest of the work was a little bit challenging but also interesting.&lt;/p&gt;

&lt;p&gt;When I was working on this plugin, I was introduced to the Qt library and its signals &amp;amp; slots mechanism of objects communication. I found that to be extremely useful and planed to import that library to my personal project. Moreover, I did learn a lot about fundamental aspects of projects building, such as project structure, configuration, Makefile, and documentation.&lt;/p&gt;

&lt;p&gt;Help is always available. We had weekly team meeting to report our process and ask questions. Tim was also available and helpful during the rest of the time. I often received timely feedback and really useful suggestions.&lt;/p&gt;

&lt;p&gt;At the final words I can say that working on the BB10 PhoneGap plugins and participate in the UCOSP was a big step for me. Not just for the fact that I developed practical skills and got a deeper understanding of the real-world projects; I also gained open source experience and made contribution to the community. I certainly enjoy working in the team with these awesome people, and would strongly recommend computer science students who wish to get involved themselves and gain open source expensive to apply for UCSOP and contribute!&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on UCOSP</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/thoughts-on-ucosp/</link>
      <pubDate>Tue, 02 Dec 2014 12:59:03 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/thoughts-on-ucosp/</guid>
      <description>&lt;div class=&#34;article-header&#34; style=&#34;color: #000000;&#34;&gt;
  &lt;p class=&#34;p1&#34;&gt;
    Faraz Sherwani from the University of Waterloo shares his thoughts on the UCOSP program this term.
  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;article-content entry-content&#34;&gt;
  &lt;div dir=&#34;ltr&#34;&gt;
    &lt;h3 style=&#34;font-weight: bolder;&#34;&gt;
      Why you may want to UCOSP
    &lt;/h3&gt;
    
    &lt;div&gt;
      &lt;ul&gt;
        &lt;li&gt;
          Meet, work with and be mentored by some really smart people in your field.
        &lt;/li&gt;
        &lt;li&gt;
          Learn a new language, or set of tools that a particular project uses, but that you are not too familiar or experienced with.
        &lt;/li&gt;
        &lt;li&gt;
          Learn the details of a particular source control workflow that you may not have used in the past.
        &lt;/li&gt;
        &lt;li&gt;
          Take a course that is altogether different from the Computer Science or Software Engineering courses you have taken or will take.
        &lt;/li&gt;
        &lt;li&gt;
          Improve your coding style, habits and the general quality of the code you create.
        &lt;/li&gt;
        &lt;li&gt;
          Code sprint (more below)
        &lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;h3 style=&#34;font-weight: bolder;&#34;&gt;
        Why you may NOT want to UCOSP
      &lt;/h3&gt;
    &lt;/div&gt;
    

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
      You do not want to or cannot handle doing some work (coding, designing, or discussing etc.) for a course, every week. 8-10 hours of work a week is generally expected for UCOSP.
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      You have some course requirements for your major that you need to fulfill but that UCOSP doesn&amp;amp;#8217;t qualify for (At the University of Waterloo where I study, UCOSP counts as an elective, not a CS course). Check with your faculty for details on this.
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h2 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  My Experience
&amp;lt;/h2&amp;gt;

&amp;lt;div&amp;gt;
  I&amp;amp;#8217;m just going to write about what the UCOSP experience was like for me, and hopefully this will help someone who wants to know more about what the program is like.
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Getting into UCOSP
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  I first heard about UCOSP, when I got an email from the head of the CS department at the University of Waterloo, suggesting that I apply. I was told it was a competitive program, where you worked on an open-source project for a course credit. As I read more about it and the projects available this term, it sounded like a great opportunity. I had put effort into my application letter, but didn&amp;amp;#8217;t think I would actually get in, so it was quite a pleasant surprise when I did.
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
    Selecting my Project
  &amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  After getting accepted into the program, in picking a project, I felt I had two options: to pick one for which I was familiar with the language and/or the topic and not have to put in as much effort into the course, or the opposite. I chose the latter, because having to use a particular language or toolset is probably the best way to force yourself to learn more about it, and this was part of the reason why I wanted to join UCOSP. The project I chose was Freeseer, which is written completely in Python; a language I had no previous experience with. There are obviously other criteria upon which you can base your selection, but in my opinion, this is one of the important ones. (You actually give a priority to each of the projects available, and then UCOSP tries to accommodate your preferences in the project they assign you to, but I got the project I had highest on my list so this wasn&amp;amp;#8217;t an issue)
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Preparation
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  I spent about a week before classes started (which is when your UCOSP work starts), learning what I could about Python and Freeseer. I read up on how Python differs from other languages I already knew, and the conventions and coding style it uses. The mentors for Freeseer had emailed us on how to get acquainted with the project. They sent us links for videos that explained what the app was about, and some checklists on things we would have to do to setup our development environment for the project, as well a project proposal template and some other useful stuff.
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Starting Out
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  The mentors don&amp;amp;#8217;t expect too much from you in the first week. They had told us that they knew that setting up the development environment would take some time, but that we should try to get some tiny piece of code merged into the main branch, since this is what most people struggle with in the beginning. They also said that people who merge early, tend to get more work done over the term (and therefore a better grade), because they know how the workflow works and they&amp;amp;#8217;re not dreading the hassle of trying to merge. I had some issues with setting up my environment but managed to get something merged in the first week and was feeling a lot more comfortable with the project.
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Code Sprint
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  The code sprint is probably the best part about UCOSP. The location differs from term to term, but for our term, we had been told that we would be flown out to Facebook headquarters in California, which was pretty exciting for all of us. You can imagine my disappointment then, when the location was changed to Mozilla offices in Toronto, due to scheduling issues. I won&amp;amp;#8217;t go into the details about the scheduling issues because it doesn&amp;amp;#8217;t matter too much, but despite my disappointment about the location change, the code sprint was a great experience. I got to meet the other students on my project team, as well as the mentors (the one&amp;amp;#8217;s who could make it), and a lot of great people from the other groups. As I said earlier, UCOSP is pretty competitive, so all the people you meet are probably going to be a lot like you, because they&amp;amp;#8217;ll all have the same (or a similar) major as yours and will all be from the top of their class. Everyone was great, and I found a bunch of people who I shared interests with. Everyone had rooms on the same floor in the same hotel, and would go out in bunches to explore the city. In the mornings, we were to show up bright and early to the sprint location, where each team/project had their own giant table on which to set up their laptops and work. All in all, I would say that the code sprint itself made the whole UCOSP experience worth it. On top of that I enjoyed the work, but I would have done it just for the code sprint, even if I didn&amp;amp;#8217;t like the rest of it.&amp;lt;/p&amp;gt; 

  &amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
    The Work
  &amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  I&amp;amp;#8217;m not sure if this part differs from project to project, but in my case, we were told to come up with a proposal for what we wanted to work on for the term, why that work was a good idea, how we would do it, as well as a schedule for how long each component would take. Most of this was to be done near the beginning of the term, but certain things like schedule and implementation details would have to be added/modified as time went on. I tried to find a balance between not proposing enough work, and proposing more work than I would have time for. I wound up being ahead of schedule towards the end of the term and worked on some minor tasks for the remainder of my time but this is probably better than being behind schedule and scrambling to get the rest of your work done.&amp;lt;/p&amp;gt; 

  &amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
    Conclusion
  &amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  I really enjoyed UCOSP; it was a great opportunity, and I&amp;amp;#8217;m glad I chose to do it. If you&amp;amp;#8217;re not sure if UCOSP is for you, hopefully this helped.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What I&amp;#8217;ve Learned From UCOSP</title>
      <link>http://haruute0.github.io/fall-2014/2014/11/what-ive-learned-from-ucosp/</link>
      <pubDate>Fri, 28 Nov 2014 13:06:34 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/11/what-ive-learned-from-ucosp/</guid>
      <description>

&lt;p&gt;Yanjia Xin from the University of Waterloo summarizes her UCOSP experience:&lt;/p&gt;

&lt;p&gt;I have grown quite a bit since I started working on Review Board. Prior to Review Board, I rarely did anything on web development, touched a little bit HTML and Javascript. I was a beginner in python, and never actually seen any Django projects before. Throughout this term, all those things have changed. Here are some tips I would like to share with all of you.&lt;/p&gt;

&lt;h2 id=&#34;don-8217-t-panic:8d7961e2903af69b451d0665693750d3&#34;&gt;Don&amp;#8217;t panic&lt;/h2&gt;

&lt;p&gt;Now you made it into UCOSP! Congratulations! If you&amp;#8217;re nervous about what is going to happen, don&amp;#8217;t worry, it will pass. You will meet a lot of new people just like you and as time goes by, everything will become easier.&lt;/p&gt;

&lt;p&gt;One thing to get started is to poking around the code base and get familiar with the tools you are going to use. That is to say, be prepared. Once you are prepared, there is nothing left to fear. Once you pick a project to work on, get some time to understand your situation before making any changes. Make a plan, and talk to your mentor about it so that you will be working towards the right direction.&lt;/p&gt;

&lt;h2 id=&#34;stay-organized:8d7961e2903af69b451d0665693750d3&#34;&gt;Stay Organized&lt;/h2&gt;

&lt;p&gt;Believe it or not, I often underestimate the time I need to finish a week&amp;#8217;s job, especially during exam period. If you&amp;#8217;re one of those super-organized people, this tip will be easy for you. The rest of us, however, need to develop a system for keeping track of meetings, appointments, assignments, and projects. Get an organizer or planner and keep on top of all your work. Schedule some concrete time each week to do your work and don&amp;#8217;t wait till the end. You will never know what will come up to block your progress. And as you look ahead, set goals for yourself &amp;#8212; and then strive to achieve them.&lt;/p&gt;

&lt;h2 id=&#34;take-some-notes:8d7961e2903af69b451d0665693750d3&#34;&gt;Take some notes&lt;/h2&gt;

&lt;p&gt;Take notes, and you&amp;#8217;ll thank yourself later. If you&amp;#8217;re a whiz with your handheld, jot notes electronically. Otherwise, invest in a small notebook that you can stick in your pocket and pull out when any idea comes up. This helps extremely when you allocate a small chunk of time for planning, and would like to pick up where you have left off later.&lt;/p&gt;

&lt;h2 id=&#34;ask-for-help:8d7961e2903af69b451d0665693750d3&#34;&gt;Ask for help&lt;/h2&gt;

&lt;p&gt;One of the most important thing I learned from UCOSP is asking for help. Don&amp;#8217;t hesitate to ask questions when you are stuck. Mentors are humans, and extremely helpful humans. Remember, there&amp;#8217;s no such thing as a dumb question. All right, that&amp;#8217;s a lie. But after I struggled for days tracking a small bug which takes my mentor one minute to point out, I realized the dumbest thing that can happen is to waste time blocking yourself from making progress.&lt;/p&gt;

&lt;h2 id=&#34;think-for-the-future:8d7961e2903af69b451d0665693750d3&#34;&gt;Think for the future&lt;/h2&gt;

&lt;p&gt;Another important skill I learned is to write clear documentation. This is very useful in real industry. If you&amp;#8217;re stuck on the documentation writing, and aren&amp;#8217;t sure how to actually write it, this is my mentor&amp;#8217;s ultimate tip to get started: pick up a rubber duck or find someone and explain what you&amp;#8217;re doing to them, explain it a few times, then write that down. A good documentation should be fully self-descriptive, allowing someone down the road to read through it and know exactly what you&amp;#8217;re doing, why, and how, without having to dive into the code.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s pretty much it! To sum up, UCOSP is awesome! I really had a enjoyable time working on Review Board team. It was not so easy to get started, but once you get used to it, you will start to have fun. To me, it was a rewarding experience and I would highly recommend getting involved in UCOSP to anyone want to contribute. Enjoy!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>