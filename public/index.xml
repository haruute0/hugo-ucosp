<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://haruute0.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://haruute0.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Fall Projects</title>
      <link>http://haruute0.github.io/2017/08/22/fall-preparation/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2017/08/22/fall-preparation/</guid>
      <description>&lt;p&gt;The fall projects are now available.  We are happy to welcome back six projects from recent years.  These include two projects that have been with us since the beginning or nearly the beginning of UCOSP: Reviewboard and Umple.  We are welcoming back Julian and the Formulize project as well as three projects from Mozilla: Firefox development tools, Code Coverage, and Task Cluster.&lt;/p&gt;

&lt;p&gt;Our new projects include another Firefox Development Tools project on the React debugger, and two new projects with a more analytic focus.  The WALA and Swift project is a collaboration between IBM and the University of Alberta.  The Safe Browsing and Tracker Prevention will involve some data collection and analysis.&lt;/p&gt;

&lt;p&gt;I think I would have a hard time making my choices if I were a student with these options.  Thanks again to the mentors for volunteering their time to work with UCOSP students.  I&amp;rsquo;m sure we will have a great term.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fall 2017 Preparation</title>
      <link>http://haruute0.github.io/2017/08/04/fall-preparation/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2017/08/04/fall-preparation/</guid>
      <description>&lt;p&gt;Preparations for the next term are well underway.  We are finalizing projects with our project mentors, including some exciting potential new projects.  We haven&amp;rsquo;t updated the project list yet, so stay tuned.&lt;/p&gt;

&lt;p&gt;The code sprint will be at the Mozilla offices in downtown Toronto Sept 22-24. Students will be getting email shortly to start booking flights.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Winter 2017 UCOSP Projects</title>
      <link>http://haruute0.github.io/2016/12/05/projects-confirmed/</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2016/12/05/projects-confirmed/</guid>
      <description>&lt;p&gt;Preparations for the winter term are well underway.  We have 34 students signed up and ready to travel to Calgary in January for the code sprint.  Thanks to our enthusiastic and generous mentors, we have 7 projects lined up.&lt;/p&gt;

&lt;p&gt;I encourage you to go read the project &lt;a href=&#34;http://haruute0.github.io/projects.html&#34;&gt;descriptions&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fall 2016 UCOSP Projects</title>
      <link>http://haruute0.github.io/2016/08/18/projects-confirmed/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2016/08/18/projects-confirmed/</guid>
      <description>&lt;p&gt;The open source communities have no shortage of generous people!  We have nine projects ready to go and 28 wonderful mentors to work with students. I&amp;rsquo;d like to welcome back returning mentors from Reviewboard, MarkUs, Umple, Mylyn, and Firefox Code Coverage.  I&amp;rsquo;d especially like to welcome Greg Mierzwinski who is returning as a mentor for Firefox Code Coverage after working on it as a UCOSP student.&lt;/p&gt;

&lt;p&gt;We have four new projects from Mozilla: Firefox 3D Z-index Tool, TaskCluster-Pulse, Pontoon, and FlyWeb.  The projects all look very interesting, and I&amp;rsquo;d like to thank all the new mentors for joining us.&lt;/p&gt;

&lt;p&gt;I encourage you to go read the project &lt;a href=&#34;http://haruute0.github.io/projects.html&#34;&gt;descriptions&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Ready for the Fall term</title>
      <link>http://haruute0.github.io/2016/08/04/fall-planning/</link>
      <pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2016/08/04/fall-planning/</guid>
      <description>&lt;p&gt;Planning is in full swing for the fall term.  Students and faculty are definitely thinking about September.  Looking at our registration form we already have about half the number of students we expect signed up and more are starting to roll in.&lt;/p&gt;

&lt;p&gt;Our fall code sprint will be held at the Mozilla offices in downtown Toronto.  Their community space is a great place to work, and Mike Hoye and his team are excellent hosts.&lt;/p&gt;

&lt;p&gt;We are still finalizing the list of projects.  We have more turnover this year than usual, but the potential new projects looks very interesting.  Longtime projects MarkUs, ReviewBoard, and Umple will be back, and I&amp;rsquo;ll post descriptions of the new projects as soon as they are available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Look and Year in Review</title>
      <link>http://haruute0.github.io/2016/05/30/new-look-and-year-in-review/</link>
      <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2016/05/30/new-look-and-year-in-review/</guid>
      <description>

&lt;h4 id=&#34;year-in-review:3572a8a49cd37c29e717b45c4ee55b48&#34;&gt;Year in Review&lt;/h4&gt;

&lt;p&gt;We had another great year with UCOSP, thanks to the generous sponsorship from Google and the support of the &lt;a href=&#34;http://cacsaic.org&#34;&gt;CACS/AIC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thirty-five students attended the September code sprint in Vancouver at the beautiful UBC campus. Our wonderful long term project mentors once again created a great experience for our students.  We welcomed back &lt;a href=&#34;https://www.reviewboard.org&#34;&gt;ReviewBoard&lt;/a&gt;, &lt;a href=&#34;http://www.freeform.ca/en/formulize&#34;&gt;Formulize&lt;/a&gt;, &lt;a href=&#34;https://github.com/blackberry/WebWorks-Community-APIs&#34;&gt;BB 10/Phonegap&lt;/a&gt;, &lt;a href=&#34;http://markusproject.org&#34;&gt;MarkUs&lt;/a&gt;, and &lt;a href=&#34;http://cruise.eecs.uottawa.ca/umple/&#34;&gt;Umple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We were thrilled to welcome back &lt;a href=&#34;http://livingcode.org&#34;&gt;Dethe Elza&lt;/a&gt; with &lt;a href=&#34;http://waterbearlang.com&#34;&gt;Waterbear&lt;/a&gt;, and
&lt;a href=&#34;https://www.linkedin.com/in/jim-parry-b7179325&#34;&gt;Jim Parry&lt;/a&gt; with &lt;a href=&#34;https://www.codeigniter.com&#34;&gt;CodeIgniter&lt;/a&gt;. Both Dethe and Jim live in the Vancouver area which made it possible for them to supervise a project this term.  We also welcomed another local, &lt;a href=&#34;https://www.linkedin.com/in/sam-davis-4571a825&#34;&gt;Sam Davis&lt;/a&gt; mentoring the &lt;a href=&#34;http://www.eclipse.org/mylyn/&#34;&gt;Mylyn&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Mozilla once again hosted the Toronto code sprint in January in their beautiful community space.  Along with returning projects Reviewboard, MarkUs, Formulize and Umple, we were joined by two Mozilla-based projects: &lt;a href=&#34;http://jupyter.org&#34;&gt;Jupyter Notebook&lt;/a&gt; and Code Coverage.  &lt;a href=&#34;http://mreid-moz.github.io&#34;&gt;Mark Reid&lt;/a&gt; and &lt;a href=&#34;https://mozillians.org/en-US/u/jmaher/&#34;&gt;Joel Maher&lt;/a&gt; and their colleagues were naturals at mentoring students, and it was a real pleasure to work them.&lt;/p&gt;

&lt;p&gt;After several years of working Tim Windsor on the Blackberry/Phonegap projects we were sad not to have him back in January.  We hope that his love of open source software will bring him back on a different project in the future.&lt;/p&gt;

&lt;h4 id=&#34;reflections:3572a8a49cd37c29e717b45c4ee55b48&#34;&gt;Reflections&lt;/h4&gt;

&lt;p&gt;It was a year of changes and time to reflect.  Schools across North America have seen dramatic increases CS program enrolments.  This was evident in the larger numbers of students applying to UCOSP.  For example, at the Univeristy of Toronto we had 75 students apply for 8 UCOSP spots.  There is clearly a demand for the kind of practical learning experience that UCOSP provides.  While we plan to support a slightly larger number of students next year, we are limited by funding and organizational overhead costs.&lt;/p&gt;

&lt;p&gt;On the otherhand we also had two schools decide not to send students this year, at least partly because they were not able to find faculty to supervise the students.  Increasing enrolments at our universities means that faculty have less time for the &amp;ldquo;extras&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Fortunately, we have not had difficulty finding interested open source projects.  We saw a higher turnover in projects this year, but we have also had cold call inquiries about how a project might be included in the program.  For the record, we are looking for some new projects for next year.&lt;/p&gt;

&lt;p&gt;Another change is the makeup of the steering committee.  Michelle is stepping down from the steering committee for a well-earned sabbatical.  Karen Reid will be chairing the committee for the next year.  Rob Walker from the University of Calgary is joining the steering committee.  Meghan Allen, Ted Kirkpatrick, and  Eleni Stroulia continue to serve on the committee.&lt;/p&gt;

&lt;h4 id=&#34;new-look:3572a8a49cd37c29e717b45c4ee55b48&#34;&gt;New Look&lt;/h4&gt;

&lt;p&gt;We decided to move the web site over to github.io, partly to save a bit of money on web hosting, but mostly to make it easier to add posts and maintain the archive of information.  You can still reach us at info@ucosp.ca&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jupyter Notebook – UCOSP 2016 – Recap</title>
      <link>http://haruute0.github.io/2016/03/24/jupyter-notebook-recap/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2016/03/24/jupyter-notebook-recap/</guid>
      <description>&lt;p&gt;&amp;ndash; Adam Wong&lt;/p&gt;

&lt;p&gt;Hey everyone, now that I am halfway through my UCOSP project, I would like to take some time to reflect and share some of my experiences.  I have had the honor of working with three other talented students from the University of British Columbia as well as with two friendly and intelligent Mozilla employees in the Jupyter Notebook project.&lt;/p&gt;

&lt;p&gt;So what exactly is a Jupyter Notebook, and why should you really care?&lt;br /&gt;
Well, the Jupyter Notebook is an electronic document that can contain Python code as well as flexible human-readable text such as paragraphs, comments, figures, equations, etc.  The code within these documents can be executed and analyzed.&lt;/p&gt;

&lt;p&gt;One of the main challenges I have overcome during this experience so far is learning to function within and adapting to the somewhat distributed working environment.  Previous assignments I’ve worked on were with a local team of developers usually in person.  People could be called or messaged and then ideas could be bounced off each other on whiteboards, over a cup of coffee or even on the same computer.&lt;/p&gt;

&lt;p&gt;This new approach has team members all over Canada working together (British Columbia, Ontario, Nova Scotia) as well as internationally (England).  The first and most obvious obstacle is that with each different area, there is a different time zone.  When scheduling meetings or Skype calls, it is common to find a reasonable time, taking into consideration the up-to-nine-hour time difference.  Outside of these scheduled weekly meetings, we often find ourselves communicating via IRC or Skype, both platforms which I am familiar with.&lt;/p&gt;

&lt;p&gt;The Jupyter Project uses many different technologies – some I have used before and others not so much.  The languages include JavaScript and Python – the former I have used for mere hours (but am currently learning) and the latter I have not used since my first year.  Ramping up was a significant challenge, as the time spent studying syntax and language structure put me even further behind my teammates.  I often felt like the least useful member of the team as the other students were much better versed in the aforementioned technologies.  In spite of this, however, after the initial ramping period I felt much more comfortable working on this project.&lt;/p&gt;

&lt;p&gt;You might be asking, “Well I know what the notebooks are, so what is your team doing?”  Our team is currently working on various add-ons for the Jupyter Notebook – extensions that will be released open-source and accessible to the public.&lt;/p&gt;

&lt;p&gt;The first project was a simple extension that would allow Jupyter Notebook files to be uploaded to GitHub’s gist platform.  Specifically, the content from the Notebook (code and text) would be uploaded to the authenticated user’s GitHub account via OAuth2 for safe keeping.  During our Toronto code sprint in January, we laid down the foundation for this extension.  The main goal for the meeting was to successfully implement a new button in the JavaScript front-end, and to link it to the Python back-end server (where the Jupyter Notebook was running) for processing.  Knowing I had limited knowledge in JavaScript at the time, I took it upon myself to handle much of the back-end Python code instead.  As I had previously studied OAuth2 in a Computer Security class at my university (ECE568), most of the APIs were familiar.  For those that don’t know, OAuth2 is a protocol used by a client (our server acts as a client to GitHub) and a server (the GitHub server offering the OAuth2 service) to allow secure access to an authenticated user’s private information.  Specifically, the user is redirected to GitHub, where they specify which services to allow us (the client) to use.  After authentication, GitHub will then comply with our requests (in this case, uploading the notebook contents as a Gist) on the user’s behalf.  After sifting through the many pages of the GitHub API documentation, I was able to independently implement the handshaking and authentication process between GitHub and our server.  However, I got stuck with formatting the notebook content which was formatted in JSON.  After spending several hours trying to figure out why my GitHub call would return with a ‘404’ error, I was at a loss.  At that point, knowing nothing about JavaScript or JSON, sought out help from my teammates who were eager to jump in and lend a hand.  Turns out there is a bizarre function call in JavaScript called “JSON.stringify” that ended up solving my issue.  With the whole team working together, we were able to get the extension out and it is now available via ‘pip’ or at &lt;a href=&#34;https://github.com/mozilla/jupyter-notebook-gist&#34;&gt;https://github.com/mozilla/jupyter-notebook-gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our second extension was an add-on for Apache Spark integration.  Apache Spark is a framework for cluster computing – a system where distributed machines can be used together to perform large computations.  It is very useful when data processing, something that Mozilla would definitely use to process large volumes of Firefox usage information.  If, within the Jupyter Notebook, an Apache Spark job was ongoing, we wanted to provide a progress bar.  Unfortunately this task had just gotten off the ground as the university’s Reading Week began, and I had already made plans to be out of the country.  I kept tabs on the progress (IRC) during that week, but sadly did not have time to make significant contributions.  Upon return, I tried to quickly ramp up, but to little avail. Apache Spark does not like to run on native Windows, so I installed VirtualBox with Ubuntu 15.04 to get it working.  Only after much debugging and installing, did I realize that all the tasks for the Apache project were taken and/or in progress by another team member.  The feeling of insignificance returned, but after expressing my concern to the Mozilla team lead, he mentioned that it might be better to get started on the next project which would soon be fleshed out and discussed.  At the end of our meeting, he mentioned someone around the office was looking for C++ assistance, which is my area of expertise so I will definitely follow up on that as soon as possible.&lt;/p&gt;

&lt;p&gt;That pretty much sums up where I am now at currently in the project.  I definitely enjoy working with everyone, and my mentors are very intelligent, open and approachable individuals.  I feel like working in an open-source environment provides me with unrestricted access to the world’s knowledge, and even someone like myself can share everything that I have learned.  Being able to see people happily using what I have worked on is such an amazing pleasure and honor for me, as a software developer.  I hope that I will be able to continue to make a difference both in the Jupyter Notebook project, and in future endeavours.&lt;/p&gt;

&lt;p&gt;While UCOSP will soon come to a close, the journey into the world of open-source is a never ending road of exploration, learning and sharing.  Mozilla is a wonderful company with many wonderful people.  It would be a dream to be given opportunities to work with them in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Generate UML Diagram of Models in Django Project</title>
      <link>http://haruute0.github.io/2016/01/12/how-to-generate-uml-diagram-of-models-in-django-project/</link>
      <pubDate>Tue, 12 Jan 2016 11:05:29 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2016/01/12/how-to-generate-uml-diagram-of-models-in-django-project/</guid>
      <description>

&lt;p&gt;(An experience report from Yorie Nakayama)&lt;/p&gt;

&lt;p&gt;If you are developing with python on Django, or on any frameworks that employ
the MVC (Model-View-Controller) paradigm, you might come across whether there
is a way to easily visualize all the models and their dependency relationships
in your application as a diagram. Models are central to most applications using
MVC, and being able to glance at the structure of models and their
relationships to each other greatly helps any developer beginning to hack on
the codebase.&lt;/p&gt;

&lt;p&gt;When I worked with Reviewboard, a Django-based web app for doing code reviews,
for my UCOSP, one of the first things I did was to generate a UML diagram of
the models in the project using an extension package for Django called
django-extensions. The diagram would let the students, who are new to the
project, to see the overall picture of the models, and also let the mentors
easily explain how some models are related to each other.&lt;/p&gt;

&lt;p&gt;This post will provide a step-by-step instruction on generating a UML
diagram of a Django application using django-extensions. Similar tools
also exist for other MVC frameworks, such as railroady gem for Ruby on
Rails, or phuml for PHP (not limited to CodeIgniter).&lt;/p&gt;

&lt;h4 id=&#34;1-install-dependencies:34163b606f8a2eecb59d56bdb3d8dde5&#34;&gt;1. Install Dependencies.&lt;/h4&gt;

&lt;p&gt;For python, you need to install either pydot or pygraphviz as a python
interface of the graph visualization library called graphviz. Either will be
fine as far as django-extensions is concerned. I went with pydot because I had
a trouble installing pygraphviz. If you choose to go with pygraphviz, you can
ignore this step and resume from step 2 after installing pygraphviz.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install pyparsing==1.5.7
  
pip install graphviz
  
pip install pydot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The version is specified on pyparsing installation because pydot is not
compatible with newer (&amp;gt;=2.x.x) versions of pyparsing. I recommend that
graphviz is installed before pydot to avoid an issue where pydot is not
able to find graphviz executable. A similar installation issue may also
occur with pygraphviz.&lt;/p&gt;

&lt;h4 id=&#34;2-install-django-extensions:34163b606f8a2eecb59d56bdb3d8dde5&#34;&gt;2. Install django-extensions.&lt;/h4&gt;

&lt;p&gt;Django-extensions provides various tools that could help development of
Django applications such as enhanced shell, or UML diagram generation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install django-extensions&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-enable-django-extensions-in-your-project:34163b606f8a2eecb59d56bdb3d8dde5&#34;&gt;3. Enable django-extensions in your project.&lt;/h4&gt;

&lt;p&gt;Under your Django project directory, open the file setting.py with a
text editor. Within the settings, you should find a python list called
INSTALLED_APPS.&lt;/p&gt;

&lt;p&gt;Append &amp;#8216;django_extensions&amp;#8217; to the list and save. Then you can use the functionalities that django-extensions provides.&lt;/p&gt;

&lt;h4 id=&#34;4-generate-the-uml-diagram:34163b606f8a2eecb59d56bdb3d8dde5&#34;&gt;4. Generate the UML diagram.&lt;/h4&gt;

&lt;p&gt;On a command shell, go to the Django project directory, and execute the
following command to generate your diagram of all models in the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python manage.py graph\_models -a -o myapp\_models.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The -a flag specifies to include all apps listed in INSTALLED_APPS for
diagram generation. The output path is relative to the project root
directory.&lt;/p&gt;

&lt;p&gt;If you decide that your project does not need django-extensions, you can
simply remove &amp;#8216;django_extensions&amp;#8217; from INSTALLED_APPS in settings.py.&lt;/p&gt;

&lt;p&gt;With a UML diagram for your models, you can easily see the overall
picture of the data organization in your application. Hopefully this
diagram could help a new member on a Django project to find where to
start with the development.&lt;/p&gt;

&lt;p&gt;&amp;#8212; Yorie Nakayama&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Ready for the New Year</title>
      <link>http://haruute0.github.io/2015/12/15/getting-ready-for-the-new-year/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://haruute0.github.io/2015/12/15/getting-ready-for-the-new-year/</guid>
      <description>&lt;p&gt;As we prepare for the next group of students who will start in January, we are seeing some turnover in the project offerings for UCOSP, so I&amp;#8217;d like to welcome the newcomers and thank the project mentors from the past term.&lt;/p&gt;

&lt;p&gt;The project mentors for Waterbear, CodeIgniter, and Mylyn are all based in Vancouver which makes it more difficult to attend a code sprint in Toronto.  It has been great working with Dethe, James and Sam, and I hope we will have a chance to work with you again in the future!&lt;/p&gt;

&lt;p&gt;We are also saying goodbye a long-term project: Phonegap.  Tim Windsor has moved to a different job and is not able to supervise students this term.  Tim has been a terrific mentor over several years, and it would be a great pleasure to work with him again.&lt;/p&gt;

&lt;p&gt;We are welcoming two new projects this term, both from Mozilla: &lt;span class=&#34;&#34;&gt;Jupyter Notebooks for Data Analysis, and Code Coverage Explorer.  I&amp;#8217;m excited to see what students will do on both of these projects.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CodeIgniter checks in</title>
      <link>http://haruute0.github.io/winter-2015/2015/04/codeigniter-checks-in/</link>
      <pubDate>Thu, 02 Apr 2015 13:18:35 +0000</pubDate>
      
      <guid>http://haruute0.github.io/winter-2015/2015/04/codeigniter-checks-in/</guid>
      <description>&lt;p class=&#34;p1&#34;&gt;
  &lt;span class=&#34;s1&#34;&gt;Xing Zeng from UToronto who has been working on the CodeIgniter project checks in on this term.&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;I am working on the CodeIgniter Project. More specifically, our team is spending most of our time in developing Netbeans plugin for CodeIgniter developers.&lt;/p&gt;

&lt;p&gt;CodeIgniter is a light-weight PHP framework, loosely based on the popular Model-View-Controller development pattern. It is the 4th most widely-used PHP framework throughout the Internet[1]. Despite this, there has been no IDE plugin for it on any major IDE, where lots of other PHP frameworks, including the famous Symphony and the not so famous Nette2, all have IDE plugins specifically designed to work with the features of their library. That&amp;#8217;s the reason why our team decided to work on it.&lt;/p&gt;

&lt;p&gt;The first platform we choose to implement our plugin was Netbeans. It is a fast and flexible IDE and it is among the preferred choice of many CodeIgniter developers as well as the IDE being taught in the CodeIgniter class at BCIT. It has tons of libraries and APIs for you to develop plugins conveniently to work with Netbeans. Since Netbeans was programmed in Java, our Plugin is also written in Java, created in Netbeans IDE as a Netbeans Module Project. Some other supplementary files were written in PHP.&lt;/p&gt;

&lt;p&gt;This is the first time I have ever worked on an open source project as well as the first time I ever started working on an open source project from the ground up. We use Github as our major tool for issue tracking and source control, just like a lot of other open source libraries including CodeIgniter itself. So I really feel excited about this golden opportunity, and I do feel I learn something from it. The following are two examples of what I have learned from participating in this project.&lt;/p&gt;

&lt;p&gt;The first target I set was to implement a view navigation functionality. It is a fairly easy task since Netbeans has already provided you the interface &lt;em&gt;HyperlinkProviderExt&lt;/em&gt; for you to implement. So I approach this naively at first, directly go into the package of code navigation to do all my coding work. I did kind of realize that this is not the correct way at the beginning of implementing a somehow complicated software, as some of my functionality in parsing Hyperlink and retrieving files may also be required by other parts of the program. But I did not have a chance to think about it carefully until I have decided how am I supposed to integrate the interface in &lt;em&gt;HyperlinkProviderExt&lt;/em&gt; with the functionality I want. This turn out to be a problem later, when one of my team members came to me and ask me how to tokenize the PHP file, which is a functionality I have implemented after I finished my code. The result of not having a consensus prior to working on the code is a minor refactoring required in my code to make the system work and a major one is still ongoing for both my package and the shared package to make the code more clear and robust.&lt;/p&gt;

&lt;p&gt;Then I switched to working on the auto-completion functionality. For this part, I realized that learning from other open source projects on Netbeans IDE Plugin is extremely useful, which is also a major reason why people promote open source. This is even more essential in my case since, for some reason I don’t know, Netbeans APIs does not have javadoc with it and it takes so much time to manually go over its online documentation. So, I looked into some other open source projects, including the source code for the Yii Plugin, wojciech-holisz plugin, as well as the Sprint Autocompletion file and the structure of the Zend Plugin. They gave me lots of help on providing me a basic idea of how the structure of my &lt;em&gt;CompletionProvider&lt;/em&gt; class could be and showing me what kind of API calls as well as pre-defined object would be convenient for me to use. This allowed me to finish the coding of this part early and understand how each part could  work together.&lt;/p&gt;

&lt;p&gt;In conclusion, I feel like working for CodeIgniter is a really great opportunity and I do feel I learned a lot from it.&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://www.sitepoint.com/best-php-frameworks-2014/**&#34;&gt;http://www.sitepoint.com/best-php-frameworks-2014/**&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UMPLE Experiences</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/umple-experiences/</link>
      <pubDate>Wed, 10 Dec 2014 16:40:20 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/umple-experiences/</guid>
      <description>&lt;p&gt;Karin Ng from the University of Toronto gives us her experience working with UMPLE this term.&lt;/p&gt;

&lt;p&gt;Umple merges UML modeling and programming to facilitate Model-Oriented Programming. The models include class diagrams, state machines, and composite structures. My primary project is to create a generator that takes in current Umple semantics to produce GraphViz (open source graph visualization software) code of an entity-relationship diagram. After I have completed the generation, I hope to look into refactoring all the generators and extracting commonalities into a generation library.&lt;/p&gt;

&lt;p&gt;Since the entity-relationship diagram generation is a larger project that requires the knowledge of how to use GraphViz, I decided to begin with a smaller issue, dealing with modifying the tooltips of current implementations of GraphViz diagrams. Believing it would be a relatively simple task, I was surprised when I took a deeper look into the code and realized that the entire structure of the diagram being generated had to be modified to accommodate the new tooltip requirements. The surprises for the seemingly simple task didn’t end there. After modifying the code, creating test cases, and testing my implementation on a clean version of the build, I was satisfied with its reliability. Though I believed that my testing was rigorous enough, I failed to notice that the code I modified was used to create the Meta-Model (a model of the Umple compiler, using Umple). The Meta-Model creation was not tested within the build and, naively trusting the lack of fails within the build, I thought myself safe. The result was a broken Meta-Model that wasn’t noticed until after the faulty code was committed. Mortified by my error, I tackled the problem as soon as I received the email notifying me of the glaring issue. After much correspondence with my mentor (including tips and encouragement), the problems were ironed out and I learned not only the technical skills I had hoped to gain concerning GraphViz, but the value of truly rigorous testing and mentorship.&lt;/p&gt;

&lt;p&gt;In a less technical sense, I also encountered difficulties with juggling my schedule. I had decided from the beginning that I would allocate time for Umple every week on my calendar. However, having taken 6 courses, I found it easy to let my scheduled Umple time slip, especially when other seemingly more pressing assignments with hard deadlines and midterms presented themselves. I also vastly underestimated the time required to get the code working 100%. Much of the work during my internship involved the creation of new features, and I rarely had to greatly modify old code. As such, the modification of the diagram generation and its problems came as a shock to me. Though implementation itself may not have taken too much time in of itself, the time requirement easily doubled when taking into account all factors (such as the design and creation of tests, the re-working of the implementation after exposing bugs from the tests, ensuring compatibility with any updates during the entire process, and applying changes from feedback from mentors).&lt;/p&gt;

&lt;p&gt;Regardless, the complications were vastly overshadowed by the immense satisfaction and joy of getting something working (no matter how small) that will impact hundreds of people. Having discovered all the possible obstacles that may get in the way of a timely commit, it only took a small reformation of my schedule and a little more mindfulness to adequately fit in some Umple development. The fun-factor of Umple development certainly helped in squeezing in more time (even if in the wee hours of the morning) to tackle the next bug or problem. The lessons have been innumerable, from working with a team scattered across the country to things as simple as not being afraid to ask questions, and I am endlessly grateful for the opportunity to be part of UCOSP.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reflecting on UCOSP</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/reflecting-on-ucosp/</link>
      <pubDate>Sun, 07 Dec 2014 21:18:28 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/reflecting-on-ucosp/</guid>
      <description>&lt;div class=&#34;page&#34; title=&#34;Page 1&#34;&gt;
  &lt;div class=&#34;section&#34;&gt;
    &lt;div class=&#34;layoutArea&#34;&gt;
      &lt;div class=&#34;column&#34;&gt;
        &lt;p class=&#34;p1&#34;&gt;
          Andrew Hong from the University of Toronto gives us his impressions of the program.
        &lt;/p&gt;
        
        &lt;p&gt;
          It has been almost two full months in the Undergraduate Capstone Open Source Projects (UCOSP) program and now that I look back, it has been an amazing experience. If you are reading this, you probably have an idea of what the UCOSP program is about and are looking to find out more. UCOSP is basically where you get to work on a distributed open source project for a semester with a team of students and mentors. The mentors and students are likely from all over the country so do not expect to see them in person regularly. You will do most of your communication online with your team through whichever method is preferred; audio, video, text chat, etc. UCOSP is very different from your typical course, you work however you want, and whenever you want. There are deadlines to be met so it keeps everything and everyone in line. Expect to work about 8-10 hours per week and sometimes more, when it is necessary. You do not get any marks until the end of the course but you will receive feedback along the way so you know how you are doing in relation to your mentor’s expectations. You can always ask them how you are coming along just in case you think you are slacking. If there is one takeaway I want you to get out of reading this, it is: enroll into UCOSP now, you will not regret it!
        &lt;/p&gt;
        
        &lt;p&gt;
          The code sprint this year was held at the Mozilla office in Toronto. It was a phenomenal and busy three days. We had all the students enrolled in UCOSP all in one space and separated into our respective teams. For ReviewBoard, we worked on bugs, started projects for the term and made sure everyone was on track. We, the students, were all set up with our environments so there was little time wasted there. It was an awesome experience to meet your fellow students and mentors so you can easily put a face to those internet nicknames that you are always chatting with 🙂 I believe the code sprint was crucial to UCOSP. It makes people familiar with who they are working with and thus making it a more comfortable working environment for all. Food and drinks were provided so no need to worry about thirst or hunger strikes. After hours was up to the team, we decided to wander around the city in search of good food and a good time. Since I was the only Toronto student in my team, I gave them a mini tour of the downtown core, without trying to be touristy. We went for hidden gems and not-so-typical dining spots and by the end of it all, it sounded like everyone had a great time!
        &lt;/p&gt;
        
        &lt;p&gt;
          I am currently working on a project called ReviewBoard (&lt;span style=&#34;color: rgb(6.670000%, 33.300000%, 80.000000%);&#34;&gt;https://www.reviewboard.org/&lt;/span&gt;). In short, it is a web based collaborative code review tool. I am not going to get into much detail about the project itself since you can find out everything from their homepage. The mentors for this project have been fantastic so far and to be quite honest, I cannot ask for any better. All our mentors have been helpful and always willing to lend a hand whenever possible; I am very fortunate to be working on a project with such great folks. We have our team meetings on IRC and in the chat, there are usually a couple of mentors ready to answer any questions we may have. Some prefer audio/video conferences but I have found that it has worked extremely well for us to just use IRC to do most of our communication. It allows other mentors and students to chime in on an issue or just discuss anything in general; it saves all the pain of trying to schedule a meeting with everyone that is involved in a discussion. I started on ReviewBoard doing simple bug fixes just to get familiar with the code base and working with Django. I have never worked with Django but once you get started on bugs and projects, everything will start to fall into place. Be sure to ask questions when you are stuck! I, for one, like to figure things out
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;page&#34; title=&#34;Page 2&#34;&gt;
  &lt;div class=&#34;section&#34;&gt;
    &lt;div class=&#34;layoutArea&#34;&gt;
      &lt;div class=&#34;column&#34;&gt;
        &lt;p&gt;
          by Googling so I sometimes spend hours figuring out the problem and realizing at the end that it was an easy fix. Sometimes when you are really stuck, dig around for yourself first then ask questions once you have given up searching. I think most people in UCOSP will agree: it is best to work in chunks than to give an hour of your time here and there. It may be tough to find a chunk of time but if you try both and compare the two approaches, you will find that you are much more productive working with chunks of time.
        &lt;/p&gt;
        
        &lt;p&gt;
          For those interested, I will dive a bit deeper into ReviewBoard so you get a better glimpse of what goes on behind the scenes and what I have learned so far in regards to the technical side of things. As mentioned earlier, ReviewBoard is a free collaborative web based code review tool. It is currently being used by many big players in the industry such as Cisco, VMware, Twitter, LinkedIn, Amazon and many more. As you can probably tell, ReviewBoard can work with companies and organizations of any size. For me, ReviewBoard was not too difficult to get a grasp of; the code base is very clean and organized so locating pieces of code is easy once you get the hang of it, they are where you will expect them to be. The ReviewBoard code base also consists of Djblets and RBTools. Djblets (pronounced jiblets) are a set of useful extensions that ReviewBoard uses, this includes a datagrid, logging utilities, site configuration tools and much more. On the other hand, RBTools is a set of client tools that allow the user to perform tasks in the command line without accessing the interface. All three code bases are very well organized and documented, so it makes things easier if you are trying to figure things out on your own.
        &lt;/p&gt;
        
        &lt;p&gt;
          My first easy fix bug was an issue with the user/group autocomplete functionality where it would be too ‘aggressive’. More specifically, the autocomplete functionality was selecting the first item that matched and once the user typed any more text, it would still autocomplete to the first item that it matched. Python was very familiar to me but not Django so I had to spend some time at the beginning to get used to the code I was reading. I found that the Django documentation on their homepage (https://docs.djangoproject.com/en/1.7) were helpful in getting started and understanding how Django works as a whole. If you are more of a visual oriented person then YouTube has plenty of good videos that explain more or less the same thing the documentation covers. Your browser’s developer tools are also a great tool to have under your belt. Without knowing where anything in the code base is located, you can use the developer tools to find out some key information (id, class, etc.) of what you are trying to modify then using that to perform a search on your code base can lead you to the right spots in the code to modify. There will be a lot of “aha!” moments once you see how everything is organized. Once the bug isfixed we check it into our local repository managed by git and post it up for review using RBTools. I realized that I did not know git fully when I had worked with it in a distributed project like ReviewBoard. It starts to bring out the all the things I thought I knew, but really did not, if that makes sense. It truly is a one of a kind learning experience that you cannot obtain from your typical Computer Science course.
        &lt;/p&gt;
        
        &lt;p&gt;
          The first project I started to work on for ReviewBoard was allowing users to download all file attachments associated with a review request. First thing I did was brainstorm what I had to do, plan out each step and where the code should be placed. I like to make empty functions as
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;page&#34; title=&#34;Page 3&#34;&gt;
  &lt;div class=&#34;section&#34;&gt;
    &lt;div class=&#34;layoutArea&#34;&gt;
      &lt;div class=&#34;column&#34;&gt;
        &lt;p&gt;
          placeholders so it will help me visualize how the entire feature will work in code. The way Django works is by having a URL dispatcher that determines which view to be called depending on which URL it matched. A view in Django takes a user request and returns a response, usually the response is filling in a template with the appropriate information. This feature did not need a template since all it needed to do was send back a zip file of all the file attachments. The feature was relatively straightforward to implement except handling files from external sources. ReviewBoard allows the administrator to set up where user uploaded file attachments are stored, it can be locally on the server, on an Amazon S3 instance or an OpenStack Swift instance. I knew a lot of the code would be similar so I tried to make sure I coulddo it as easily as possible without duplicating code. It turns out that I could leverage file-like objects (StringIO package) to read local and external files into an object and then write it out to the resulting zip file. After some extensive testing, and a few peer reviews, it should be ready to ship!
        &lt;/p&gt;
        
        &lt;p&gt;
          Next up for my student project, I will be working on adding functionality for the command line tools (RBTools), to enable the tools to search for the matching review request for a given commit. This is helpful when a developer makes new commits to their repository and needs to update the review request, they no longer have to manually input the review request ID and instead the tool can automatically find it for them. The function already exists for some RBTool functions so I will reuse the existing code to implement it for other functions that are missing this feature.
        &lt;/p&gt;
        
        &lt;p&gt;
          So that is it! This is my UCOSP experience so far and I hope you learn a thing or two from my experiences. I am definitely looking forward to the rest of the term but sad at the same time that it will be over shortly 🙁
        &lt;/p&gt;
        
        &lt;p&gt;
          TL;DR enroll in UCOSP and ask questions!
        &lt;/p&gt;
        
        &lt;p&gt;
          If you have any questions, please feel free to ask!&lt;br /&gt; The UCOSP steering committee are a great bunch, so don’t be shy!
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sharing my UCOSP Experience</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/sharing-my-ucosp-experience/</link>
      <pubDate>Thu, 04 Dec 2014 15:41:19 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/sharing-my-ucosp-experience/</guid>
      <description>&lt;p class=&#34;p1&#34;&gt;
  Yifan Ren from the University of Waterloo provides this overview of his UCOSP experience:
&lt;/p&gt;

&lt;p&gt;I Participated in the BB10 PhoneGap team and was working on porting native plugins for BlackBerry10. I had an enjoyable and rewarding time working on the project, and experienced real-world software engineering practices and open source collaboration.&lt;/p&gt;

&lt;p&gt;One thing I really appreciate about the BB10 PhoneGap project is its tasks. It has a list of independent tasks, and each one requests to build a complete plugin project of a useful feature, for example, zip file extraction and compression, barcode scanner, and system dialog. We had a chance to select one that interested us most, and would deal with the whole project, including configuration, source code, build, documentation and tests.&lt;/p&gt;

&lt;p&gt;The first task I selected was to finish the Distimo plugin. Distimo is a mobile app analytics firm, and that plugin helps application developers to track users activities. The project was partly done, and my job was to finish the configuration and add several features. It took my some time to get familiar with the whole system including the Cordova frameworks, the plugin interface, the JavaScript implementation, the native C++ code, and how everything is connected. Fortunately, everything was well-documented, and Tim, our mentor, was extremely helpful and very experienced at the BB10 plugins. By the end of the code sprint, I had finished the configuration, made the test app run, and got some idea about the remaining works.&lt;/p&gt;

&lt;p&gt;Once I was working on a feature called Applink. It gets app id from the Distimo server and shows that app in the blackberry Appworld. I figured out that its implementation needs http requests and http header settings, and I had just learned these early that week in a university course. At that moment, I felt strongly that this project was a great opportunity to apply my knowledge and skills learned in class to the real-life.&lt;/p&gt;

&lt;p&gt;My second task was to build the system dialog plugin, which allows users to prompt global dialogs with buttons from their applications. Thanks to the handy templates and detailed documents, the starting steps were quite easy, while the rest of the work was a little bit challenging but also interesting.&lt;/p&gt;

&lt;p&gt;When I was working on this plugin, I was introduced to the Qt library and its signals &amp;amp; slots mechanism of objects communication. I found that to be extremely useful and planed to import that library to my personal project. Moreover, I did learn a lot about fundamental aspects of projects building, such as project structure, configuration, Makefile, and documentation.&lt;/p&gt;

&lt;p&gt;Help is always available. We had weekly team meeting to report our process and ask questions. Tim was also available and helpful during the rest of the time. I often received timely feedback and really useful suggestions.&lt;/p&gt;

&lt;p&gt;At the final words I can say that working on the BB10 PhoneGap plugins and participate in the UCOSP was a big step for me. Not just for the fact that I developed practical skills and got a deeper understanding of the real-world projects; I also gained open source experience and made contribution to the community. I certainly enjoy working in the team with these awesome people, and would strongly recommend computer science students who wish to get involved themselves and gain open source expensive to apply for UCSOP and contribute!&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on UCOSP</title>
      <link>http://haruute0.github.io/fall-2014/2014/12/thoughts-on-ucosp/</link>
      <pubDate>Tue, 02 Dec 2014 12:59:03 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/12/thoughts-on-ucosp/</guid>
      <description>&lt;div class=&#34;article-header&#34; style=&#34;color: #000000;&#34;&gt;
  &lt;p class=&#34;p1&#34;&gt;
    Faraz Sherwani from the University of Waterloo shares his thoughts on the UCOSP program this term.
  &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;article-content entry-content&#34;&gt;
  &lt;div dir=&#34;ltr&#34;&gt;
    &lt;h3 style=&#34;font-weight: bolder;&#34;&gt;
      Why you may want to UCOSP
    &lt;/h3&gt;
    
    &lt;div&gt;
      &lt;ul&gt;
        &lt;li&gt;
          Meet, work with and be mentored by some really smart people in your field.
        &lt;/li&gt;
        &lt;li&gt;
          Learn a new language, or set of tools that a particular project uses, but that you are not too familiar or experienced with.
        &lt;/li&gt;
        &lt;li&gt;
          Learn the details of a particular source control workflow that you may not have used in the past.
        &lt;/li&gt;
        &lt;li&gt;
          Take a course that is altogether different from the Computer Science or Software Engineering courses you have taken or will take.
        &lt;/li&gt;
        &lt;li&gt;
          Improve your coding style, habits and the general quality of the code you create.
        &lt;/li&gt;
        &lt;li&gt;
          Code sprint (more below)
        &lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;h3 style=&#34;font-weight: bolder;&#34;&gt;
        Why you may NOT want to UCOSP
      &lt;/h3&gt;
    &lt;/div&gt;
    

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
      You do not want to or cannot handle doing some work (coding, designing, or discussing etc.) for a course, every week. 8-10 hours of work a week is generally expected for UCOSP.
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      You have some course requirements for your major that you need to fulfill but that UCOSP doesn&amp;amp;#8217;t qualify for (At the University of Waterloo where I study, UCOSP counts as an elective, not a CS course). Check with your faculty for details on this.
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h2 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  My Experience
&amp;lt;/h2&amp;gt;

&amp;lt;div&amp;gt;
  I&amp;amp;#8217;m just going to write about what the UCOSP experience was like for me, and hopefully this will help someone who wants to know more about what the program is like.
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Getting into UCOSP
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  I first heard about UCOSP, when I got an email from the head of the CS department at the University of Waterloo, suggesting that I apply. I was told it was a competitive program, where you worked on an open-source project for a course credit. As I read more about it and the projects available this term, it sounded like a great opportunity. I had put effort into my application letter, but didn&amp;amp;#8217;t think I would actually get in, so it was quite a pleasant surprise when I did.
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
    Selecting my Project
  &amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  After getting accepted into the program, in picking a project, I felt I had two options: to pick one for which I was familiar with the language and/or the topic and not have to put in as much effort into the course, or the opposite. I chose the latter, because having to use a particular language or toolset is probably the best way to force yourself to learn more about it, and this was part of the reason why I wanted to join UCOSP. The project I chose was Freeseer, which is written completely in Python; a language I had no previous experience with. There are obviously other criteria upon which you can base your selection, but in my opinion, this is one of the important ones. (You actually give a priority to each of the projects available, and then UCOSP tries to accommodate your preferences in the project they assign you to, but I got the project I had highest on my list so this wasn&amp;amp;#8217;t an issue)
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Preparation
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  I spent about a week before classes started (which is when your UCOSP work starts), learning what I could about Python and Freeseer. I read up on how Python differs from other languages I already knew, and the conventions and coding style it uses. The mentors for Freeseer had emailed us on how to get acquainted with the project. They sent us links for videos that explained what the app was about, and some checklists on things we would have to do to setup our development environment for the project, as well a project proposal template and some other useful stuff.
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Starting Out
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  The mentors don&amp;amp;#8217;t expect too much from you in the first week. They had told us that they knew that setting up the development environment would take some time, but that we should try to get some tiny piece of code merged into the main branch, since this is what most people struggle with in the beginning. They also said that people who merge early, tend to get more work done over the term (and therefore a better grade), because they know how the workflow works and they&amp;amp;#8217;re not dreading the hassle of trying to merge. I had some issues with setting up my environment but managed to get something merged in the first week and was feeling a lot more comfortable with the project.
&amp;lt;/div&amp;gt;

&amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
  Code Sprint
&amp;lt;/h3&amp;gt;

&amp;lt;div&amp;gt;
  The code sprint is probably the best part about UCOSP. The location differs from term to term, but for our term, we had been told that we would be flown out to Facebook headquarters in California, which was pretty exciting for all of us. You can imagine my disappointment then, when the location was changed to Mozilla offices in Toronto, due to scheduling issues. I won&amp;amp;#8217;t go into the details about the scheduling issues because it doesn&amp;amp;#8217;t matter too much, but despite my disappointment about the location change, the code sprint was a great experience. I got to meet the other students on my project team, as well as the mentors (the one&amp;amp;#8217;s who could make it), and a lot of great people from the other groups. As I said earlier, UCOSP is pretty competitive, so all the people you meet are probably going to be a lot like you, because they&amp;amp;#8217;ll all have the same (or a similar) major as yours and will all be from the top of their class. Everyone was great, and I found a bunch of people who I shared interests with. Everyone had rooms on the same floor in the same hotel, and would go out in bunches to explore the city. In the mornings, we were to show up bright and early to the sprint location, where each team/project had their own giant table on which to set up their laptops and work. All in all, I would say that the code sprint itself made the whole UCOSP experience worth it. On top of that I enjoyed the work, but I would have done it just for the code sprint, even if I didn&amp;amp;#8217;t like the rest of it.&amp;lt;/p&amp;gt; 

  &amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
    The Work
  &amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  I&amp;amp;#8217;m not sure if this part differs from project to project, but in my case, we were told to come up with a proposal for what we wanted to work on for the term, why that work was a good idea, how we would do it, as well as a schedule for how long each component would take. Most of this was to be done near the beginning of the term, but certain things like schedule and implementation details would have to be added/modified as time went on. I tried to find a balance between not proposing enough work, and proposing more work than I would have time for. I wound up being ahead of schedule towards the end of the term and worked on some minor tasks for the remainder of my time but this is probably better than being behind schedule and scrambling to get the rest of your work done.&amp;lt;/p&amp;gt; 

  &amp;lt;h3 style=&amp;quot;font-weight: bolder;&amp;quot;&amp;gt;
    Conclusion
  &amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
  I really enjoyed UCOSP; it was a great opportunity, and I&amp;amp;#8217;m glad I chose to do it. If you&amp;amp;#8217;re not sure if UCOSP is for you, hopefully this helped.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What I&amp;#8217;ve Learned From UCOSP</title>
      <link>http://haruute0.github.io/fall-2014/2014/11/what-ive-learned-from-ucosp/</link>
      <pubDate>Fri, 28 Nov 2014 13:06:34 +0000</pubDate>
      
      <guid>http://haruute0.github.io/fall-2014/2014/11/what-ive-learned-from-ucosp/</guid>
      <description>

&lt;p&gt;Yanjia Xin from the University of Waterloo summarizes her UCOSP experience:&lt;/p&gt;

&lt;p&gt;I have grown quite a bit since I started working on Review Board. Prior to Review Board, I rarely did anything on web development, touched a little bit HTML and Javascript. I was a beginner in python, and never actually seen any Django projects before. Throughout this term, all those things have changed. Here are some tips I would like to share with all of you.&lt;/p&gt;

&lt;h2 id=&#34;don-8217-t-panic:8d7961e2903af69b451d0665693750d3&#34;&gt;Don&amp;#8217;t panic&lt;/h2&gt;

&lt;p&gt;Now you made it into UCOSP! Congratulations! If you&amp;#8217;re nervous about what is going to happen, don&amp;#8217;t worry, it will pass. You will meet a lot of new people just like you and as time goes by, everything will become easier.&lt;/p&gt;

&lt;p&gt;One thing to get started is to poking around the code base and get familiar with the tools you are going to use. That is to say, be prepared. Once you are prepared, there is nothing left to fear. Once you pick a project to work on, get some time to understand your situation before making any changes. Make a plan, and talk to your mentor about it so that you will be working towards the right direction.&lt;/p&gt;

&lt;h2 id=&#34;stay-organized:8d7961e2903af69b451d0665693750d3&#34;&gt;Stay Organized&lt;/h2&gt;

&lt;p&gt;Believe it or not, I often underestimate the time I need to finish a week&amp;#8217;s job, especially during exam period. If you&amp;#8217;re one of those super-organized people, this tip will be easy for you. The rest of us, however, need to develop a system for keeping track of meetings, appointments, assignments, and projects. Get an organizer or planner and keep on top of all your work. Schedule some concrete time each week to do your work and don&amp;#8217;t wait till the end. You will never know what will come up to block your progress. And as you look ahead, set goals for yourself &amp;#8212; and then strive to achieve them.&lt;/p&gt;

&lt;h2 id=&#34;take-some-notes:8d7961e2903af69b451d0665693750d3&#34;&gt;Take some notes&lt;/h2&gt;

&lt;p&gt;Take notes, and you&amp;#8217;ll thank yourself later. If you&amp;#8217;re a whiz with your handheld, jot notes electronically. Otherwise, invest in a small notebook that you can stick in your pocket and pull out when any idea comes up. This helps extremely when you allocate a small chunk of time for planning, and would like to pick up where you have left off later.&lt;/p&gt;

&lt;h2 id=&#34;ask-for-help:8d7961e2903af69b451d0665693750d3&#34;&gt;Ask for help&lt;/h2&gt;

&lt;p&gt;One of the most important thing I learned from UCOSP is asking for help. Don&amp;#8217;t hesitate to ask questions when you are stuck. Mentors are humans, and extremely helpful humans. Remember, there&amp;#8217;s no such thing as a dumb question. All right, that&amp;#8217;s a lie. But after I struggled for days tracking a small bug which takes my mentor one minute to point out, I realized the dumbest thing that can happen is to waste time blocking yourself from making progress.&lt;/p&gt;

&lt;h2 id=&#34;think-for-the-future:8d7961e2903af69b451d0665693750d3&#34;&gt;Think for the future&lt;/h2&gt;

&lt;p&gt;Another important skill I learned is to write clear documentation. This is very useful in real industry. If you&amp;#8217;re stuck on the documentation writing, and aren&amp;#8217;t sure how to actually write it, this is my mentor&amp;#8217;s ultimate tip to get started: pick up a rubber duck or find someone and explain what you&amp;#8217;re doing to them, explain it a few times, then write that down. A good documentation should be fully self-descriptive, allowing someone down the road to read through it and know exactly what you&amp;#8217;re doing, why, and how, without having to dive into the code.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s pretty much it! To sum up, UCOSP is awesome! I really had a enjoyable time working on Review Board team. It was not so easy to get started, but once you get used to it, you will start to have fun. To me, it was a rewarding experience and I would highly recommend getting involved in UCOSP to anyone want to contribute. Enjoy!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>